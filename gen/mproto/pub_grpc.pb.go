// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: mproto/pub.proto

package mproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	model "muskex/gen/mproto/model"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PubService_Index_FullMethodName              = "/mproto.PubService/Index"
	PubService_HelpList_FullMethodName           = "/mproto.PubService/HelpList"
	PubService_HelpDetail_FullMethodName         = "/mproto.PubService/HelpDetail"
	PubService_CarouselList_FullMethodName       = "/mproto.PubService/CarouselList"
	PubService_IndexAllCoin_FullMethodName       = "/mproto.PubService/IndexAllCoin"
	PubService_BankList_FullMethodName           = "/mproto.PubService/BankList"
	PubService_CoinManagementList_FullMethodName = "/mproto.PubService/CoinManagementList"
	PubService_MinerList_FullMethodName          = "/mproto.PubService/MinerList"
	PubService_GetBankByPre_FullMethodName       = "/mproto.PubService/GetBankByPre"
	PubService_KlineInfoList_FullMethodName      = "/mproto.PubService/KlineInfoList"
	PubService_KlineInfoLast_FullMethodName      = "/mproto.PubService/KlineInfoLast"
	PubService_KlineTradeList_FullMethodName     = "/mproto.PubService/KlineTradeList"
	PubService_RankList_FullMethodName           = "/mproto.PubService/RankList"
	PubService_SendSms_FullMethodName            = "/mproto.PubService/SendSms"
	PubService_Greet_FullMethodName              = "/mproto.PubService/Greet"
)

// PubServiceClient is the client API for PubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PubServiceClient interface {
	// 首页，对应旧项目的 /api/index/home
	Index(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*IndexResonse, error)
	// 源api /api/index/helpCenter
	HelpList(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*HelpListResponse, error)
	// 源api /api/index/helpDetail?name=xxx
	HelpDetail(ctx context.Context, in *StringParam, opts ...grpc.CallOption) (*model.Config, error)
	// 首页轮播 对应旧项目的 /api/index/carouselList
	CarouselList(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*CarouselListResonse, error)
	// 首页3个币排行及推荐，币数据中的logImage路径，使用这样的模板 https://image.tecajx.vipimages/{xxx}.png ; 如BTC使用https://image.tecajx.vip/images/BTC.png
	IndexAllCoin(ctx context.Context, in *PidParam, opts ...grpc.CallOption) (*IndexAllCoinResponse, error)
	// 银行卡列表 对应旧项目的 /api/financial_card/bankList
	BankList(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*BankListResonse, error)
	// usdt理财 对应旧项目的 /coin_management/index
	CoinManagementList(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*CoinManagementListResonses, error)
	// 矿机列表
	MinerList(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*MinerListResonses, error)
	// 按卡号获取卡信息。 对应旧项目的  /api/financial_card/getBank?card=xxxxxx
	GetBankByPre(ctx context.Context, in *GetBankByPreRequest, opts ...grpc.CallOption) (*model.FinancialBank, error)
	// kline初始列表:服务端缓存5秒 对应旧项目的  /api/coin_data/kline
	KlineInfoList(ctx context.Context, in *KlineInfoRequest, opts ...grpc.CallOption) (*KlineDataResponse, error)
	// kline离当前时间最近的1条信息:服务端缓存1秒; 同时附带了depth,ticker数据。 对应旧项目的  /api/coin_data/kline
	KlineInfoLast(ctx context.Context, in *KlineInfoRequest, opts ...grpc.CallOption) (*KlineInfoLastResonse, error)
	// kline trade信息:服务端缓存1秒。 对应旧项目的  /api/coin_data/trade
	KlineTradeList(ctx context.Context, in *StringParam, opts ...grpc.CallOption) (*KlineTradeListResonse, error)
	// 行情列表  对应旧项目的  api/coin_data/ticker
	RankList(ctx context.Context, in *RankListRequest, opts ...grpc.CallOption) (*RankListResponse, error)
	SendSms(ctx context.Context, in *SendSmsRequest, opts ...grpc.CallOption) (*MsgResponse, error)
	Greet(ctx context.Context, in *StringParam, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GreetResponse], error)
}

type pubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPubServiceClient(cc grpc.ClientConnInterface) PubServiceClient {
	return &pubServiceClient{cc}
}

func (c *pubServiceClient) Index(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*IndexResonse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IndexResonse)
	err := c.cc.Invoke(ctx, PubService_Index_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubServiceClient) HelpList(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*HelpListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelpListResponse)
	err := c.cc.Invoke(ctx, PubService_HelpList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubServiceClient) HelpDetail(ctx context.Context, in *StringParam, opts ...grpc.CallOption) (*model.Config, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(model.Config)
	err := c.cc.Invoke(ctx, PubService_HelpDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubServiceClient) CarouselList(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*CarouselListResonse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CarouselListResonse)
	err := c.cc.Invoke(ctx, PubService_CarouselList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubServiceClient) IndexAllCoin(ctx context.Context, in *PidParam, opts ...grpc.CallOption) (*IndexAllCoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IndexAllCoinResponse)
	err := c.cc.Invoke(ctx, PubService_IndexAllCoin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubServiceClient) BankList(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*BankListResonse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BankListResonse)
	err := c.cc.Invoke(ctx, PubService_BankList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubServiceClient) CoinManagementList(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*CoinManagementListResonses, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoinManagementListResonses)
	err := c.cc.Invoke(ctx, PubService_CoinManagementList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubServiceClient) MinerList(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*MinerListResonses, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MinerListResonses)
	err := c.cc.Invoke(ctx, PubService_MinerList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubServiceClient) GetBankByPre(ctx context.Context, in *GetBankByPreRequest, opts ...grpc.CallOption) (*model.FinancialBank, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(model.FinancialBank)
	err := c.cc.Invoke(ctx, PubService_GetBankByPre_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubServiceClient) KlineInfoList(ctx context.Context, in *KlineInfoRequest, opts ...grpc.CallOption) (*KlineDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KlineDataResponse)
	err := c.cc.Invoke(ctx, PubService_KlineInfoList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubServiceClient) KlineInfoLast(ctx context.Context, in *KlineInfoRequest, opts ...grpc.CallOption) (*KlineInfoLastResonse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KlineInfoLastResonse)
	err := c.cc.Invoke(ctx, PubService_KlineInfoLast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubServiceClient) KlineTradeList(ctx context.Context, in *StringParam, opts ...grpc.CallOption) (*KlineTradeListResonse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KlineTradeListResonse)
	err := c.cc.Invoke(ctx, PubService_KlineTradeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubServiceClient) RankList(ctx context.Context, in *RankListRequest, opts ...grpc.CallOption) (*RankListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RankListResponse)
	err := c.cc.Invoke(ctx, PubService_RankList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubServiceClient) SendSms(ctx context.Context, in *SendSmsRequest, opts ...grpc.CallOption) (*MsgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgResponse)
	err := c.cc.Invoke(ctx, PubService_SendSms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubServiceClient) Greet(ctx context.Context, in *StringParam, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GreetResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PubService_ServiceDesc.Streams[0], PubService_Greet_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StringParam, GreetResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PubService_GreetClient = grpc.ServerStreamingClient[GreetResponse]

// PubServiceServer is the server API for PubService service.
// All implementations must embed UnimplementedPubServiceServer
// for forward compatibility.
type PubServiceServer interface {
	// 首页，对应旧项目的 /api/index/home
	Index(context.Context, *NullMsg) (*IndexResonse, error)
	// 源api /api/index/helpCenter
	HelpList(context.Context, *NullMsg) (*HelpListResponse, error)
	// 源api /api/index/helpDetail?name=xxx
	HelpDetail(context.Context, *StringParam) (*model.Config, error)
	// 首页轮播 对应旧项目的 /api/index/carouselList
	CarouselList(context.Context, *NullMsg) (*CarouselListResonse, error)
	// 首页3个币排行及推荐，币数据中的logImage路径，使用这样的模板 https://image.tecajx.vipimages/{xxx}.png ; 如BTC使用https://image.tecajx.vip/images/BTC.png
	IndexAllCoin(context.Context, *PidParam) (*IndexAllCoinResponse, error)
	// 银行卡列表 对应旧项目的 /api/financial_card/bankList
	BankList(context.Context, *NullMsg) (*BankListResonse, error)
	// usdt理财 对应旧项目的 /coin_management/index
	CoinManagementList(context.Context, *NullMsg) (*CoinManagementListResonses, error)
	// 矿机列表
	MinerList(context.Context, *NullMsg) (*MinerListResonses, error)
	// 按卡号获取卡信息。 对应旧项目的  /api/financial_card/getBank?card=xxxxxx
	GetBankByPre(context.Context, *GetBankByPreRequest) (*model.FinancialBank, error)
	// kline初始列表:服务端缓存5秒 对应旧项目的  /api/coin_data/kline
	KlineInfoList(context.Context, *KlineInfoRequest) (*KlineDataResponse, error)
	// kline离当前时间最近的1条信息:服务端缓存1秒; 同时附带了depth,ticker数据。 对应旧项目的  /api/coin_data/kline
	KlineInfoLast(context.Context, *KlineInfoRequest) (*KlineInfoLastResonse, error)
	// kline trade信息:服务端缓存1秒。 对应旧项目的  /api/coin_data/trade
	KlineTradeList(context.Context, *StringParam) (*KlineTradeListResonse, error)
	// 行情列表  对应旧项目的  api/coin_data/ticker
	RankList(context.Context, *RankListRequest) (*RankListResponse, error)
	SendSms(context.Context, *SendSmsRequest) (*MsgResponse, error)
	Greet(*StringParam, grpc.ServerStreamingServer[GreetResponse]) error
	mustEmbedUnimplementedPubServiceServer()
}

// UnimplementedPubServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPubServiceServer struct{}

func (UnimplementedPubServiceServer) Index(context.Context, *NullMsg) (*IndexResonse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Index not implemented")
}
func (UnimplementedPubServiceServer) HelpList(context.Context, *NullMsg) (*HelpListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpList not implemented")
}
func (UnimplementedPubServiceServer) HelpDetail(context.Context, *StringParam) (*model.Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpDetail not implemented")
}
func (UnimplementedPubServiceServer) CarouselList(context.Context, *NullMsg) (*CarouselListResonse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CarouselList not implemented")
}
func (UnimplementedPubServiceServer) IndexAllCoin(context.Context, *PidParam) (*IndexAllCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexAllCoin not implemented")
}
func (UnimplementedPubServiceServer) BankList(context.Context, *NullMsg) (*BankListResonse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BankList not implemented")
}
func (UnimplementedPubServiceServer) CoinManagementList(context.Context, *NullMsg) (*CoinManagementListResonses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoinManagementList not implemented")
}
func (UnimplementedPubServiceServer) MinerList(context.Context, *NullMsg) (*MinerListResonses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinerList not implemented")
}
func (UnimplementedPubServiceServer) GetBankByPre(context.Context, *GetBankByPreRequest) (*model.FinancialBank, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankByPre not implemented")
}
func (UnimplementedPubServiceServer) KlineInfoList(context.Context, *KlineInfoRequest) (*KlineDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KlineInfoList not implemented")
}
func (UnimplementedPubServiceServer) KlineInfoLast(context.Context, *KlineInfoRequest) (*KlineInfoLastResonse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KlineInfoLast not implemented")
}
func (UnimplementedPubServiceServer) KlineTradeList(context.Context, *StringParam) (*KlineTradeListResonse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KlineTradeList not implemented")
}
func (UnimplementedPubServiceServer) RankList(context.Context, *RankListRequest) (*RankListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RankList not implemented")
}
func (UnimplementedPubServiceServer) SendSms(context.Context, *SendSmsRequest) (*MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSms not implemented")
}
func (UnimplementedPubServiceServer) Greet(*StringParam, grpc.ServerStreamingServer[GreetResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Greet not implemented")
}
func (UnimplementedPubServiceServer) mustEmbedUnimplementedPubServiceServer() {}
func (UnimplementedPubServiceServer) testEmbeddedByValue()                    {}

// UnsafePubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PubServiceServer will
// result in compilation errors.
type UnsafePubServiceServer interface {
	mustEmbedUnimplementedPubServiceServer()
}

func RegisterPubServiceServer(s grpc.ServiceRegistrar, srv PubServiceServer) {
	// If the following call pancis, it indicates UnimplementedPubServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PubService_ServiceDesc, srv)
}

func _PubService_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubServiceServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PubService_Index_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubServiceServer).Index(ctx, req.(*NullMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubService_HelpList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubServiceServer).HelpList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PubService_HelpList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubServiceServer).HelpList(ctx, req.(*NullMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubService_HelpDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubServiceServer).HelpDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PubService_HelpDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubServiceServer).HelpDetail(ctx, req.(*StringParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubService_CarouselList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubServiceServer).CarouselList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PubService_CarouselList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubServiceServer).CarouselList(ctx, req.(*NullMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubService_IndexAllCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PidParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubServiceServer).IndexAllCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PubService_IndexAllCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubServiceServer).IndexAllCoin(ctx, req.(*PidParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubService_BankList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubServiceServer).BankList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PubService_BankList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubServiceServer).BankList(ctx, req.(*NullMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubService_CoinManagementList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubServiceServer).CoinManagementList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PubService_CoinManagementList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubServiceServer).CoinManagementList(ctx, req.(*NullMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubService_MinerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubServiceServer).MinerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PubService_MinerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubServiceServer).MinerList(ctx, req.(*NullMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubService_GetBankByPre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBankByPreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubServiceServer).GetBankByPre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PubService_GetBankByPre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubServiceServer).GetBankByPre(ctx, req.(*GetBankByPreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubService_KlineInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KlineInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubServiceServer).KlineInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PubService_KlineInfoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubServiceServer).KlineInfoList(ctx, req.(*KlineInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubService_KlineInfoLast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KlineInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubServiceServer).KlineInfoLast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PubService_KlineInfoLast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubServiceServer).KlineInfoLast(ctx, req.(*KlineInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubService_KlineTradeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubServiceServer).KlineTradeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PubService_KlineTradeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubServiceServer).KlineTradeList(ctx, req.(*StringParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubService_RankList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubServiceServer).RankList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PubService_RankList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubServiceServer).RankList(ctx, req.(*RankListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubService_SendSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubServiceServer).SendSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PubService_SendSms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubServiceServer).SendSms(ctx, req.(*SendSmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubService_Greet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StringParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PubServiceServer).Greet(m, &grpc.GenericServerStream[StringParam, GreetResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PubService_GreetServer = grpc.ServerStreamingServer[GreetResponse]

// PubService_ServiceDesc is the grpc.ServiceDesc for PubService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PubService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mproto.PubService",
	HandlerType: (*PubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Index",
			Handler:    _PubService_Index_Handler,
		},
		{
			MethodName: "HelpList",
			Handler:    _PubService_HelpList_Handler,
		},
		{
			MethodName: "HelpDetail",
			Handler:    _PubService_HelpDetail_Handler,
		},
		{
			MethodName: "CarouselList",
			Handler:    _PubService_CarouselList_Handler,
		},
		{
			MethodName: "IndexAllCoin",
			Handler:    _PubService_IndexAllCoin_Handler,
		},
		{
			MethodName: "BankList",
			Handler:    _PubService_BankList_Handler,
		},
		{
			MethodName: "CoinManagementList",
			Handler:    _PubService_CoinManagementList_Handler,
		},
		{
			MethodName: "MinerList",
			Handler:    _PubService_MinerList_Handler,
		},
		{
			MethodName: "GetBankByPre",
			Handler:    _PubService_GetBankByPre_Handler,
		},
		{
			MethodName: "KlineInfoList",
			Handler:    _PubService_KlineInfoList_Handler,
		},
		{
			MethodName: "KlineInfoLast",
			Handler:    _PubService_KlineInfoLast_Handler,
		},
		{
			MethodName: "KlineTradeList",
			Handler:    _PubService_KlineTradeList_Handler,
		},
		{
			MethodName: "RankList",
			Handler:    _PubService_RankList_Handler,
		},
		{
			MethodName: "SendSms",
			Handler:    _PubService_SendSms_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Greet",
			Handler:       _PubService_Greet_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mproto/pub.proto",
}
