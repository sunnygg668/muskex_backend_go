// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mproto/user_auth.proto

package mprotoconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	mproto "muskex/gen/mproto"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserAuthServiceName is the fully-qualified name of the UserAuthService service.
	UserAuthServiceName = "mproto.UserAuthService"
	// WpAuthServiceName is the fully-qualified name of the WpAuthService service.
	WpAuthServiceName = "mproto.WpAuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserAuthServiceVerifyCodeProcedure is the fully-qualified name of the UserAuthService's
	// VerifyCode RPC.
	UserAuthServiceVerifyCodeProcedure = "/mproto.UserAuthService/VerifyCode"
	// UserAuthServiceSignUpProcedure is the fully-qualified name of the UserAuthService's SignUp RPC.
	UserAuthServiceSignUpProcedure = "/mproto.UserAuthService/SignUp"
	// UserAuthServiceSignInProcedure is the fully-qualified name of the UserAuthService's SignIn RPC.
	UserAuthServiceSignInProcedure = "/mproto.UserAuthService/SignIn"
	// UserAuthServiceForgetPwdProcedure is the fully-qualified name of the UserAuthService's ForgetPwd
	// RPC.
	UserAuthServiceForgetPwdProcedure = "/mproto.UserAuthService/ForgetPwd"
	// UserAuthServiceUpdateFundPasswordProcedure is the fully-qualified name of the UserAuthService's
	// UpdateFundPassword RPC.
	UserAuthServiceUpdateFundPasswordProcedure = "/mproto.UserAuthService/UpdateFundPassword"
	// WpAuthServiceWPChallengeProcedure is the fully-qualified name of the WpAuthService's WPChallenge
	// RPC.
	WpAuthServiceWPChallengeProcedure = "/mproto.WpAuthService/WPChallenge"
	// WpAuthServiceWPluginLoginProcedure is the fully-qualified name of the WpAuthService's
	// WPluginLogin RPC.
	WpAuthServiceWPluginLoginProcedure = "/mproto.WpAuthService/WPluginLogin"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	userAuthServiceServiceDescriptor                  = mproto.File_mproto_user_auth_proto.Services().ByName("UserAuthService")
	userAuthServiceVerifyCodeMethodDescriptor         = userAuthServiceServiceDescriptor.Methods().ByName("VerifyCode")
	userAuthServiceSignUpMethodDescriptor             = userAuthServiceServiceDescriptor.Methods().ByName("SignUp")
	userAuthServiceSignInMethodDescriptor             = userAuthServiceServiceDescriptor.Methods().ByName("SignIn")
	userAuthServiceForgetPwdMethodDescriptor          = userAuthServiceServiceDescriptor.Methods().ByName("ForgetPwd")
	userAuthServiceUpdateFundPasswordMethodDescriptor = userAuthServiceServiceDescriptor.Methods().ByName("UpdateFundPassword")
	wpAuthServiceServiceDescriptor                    = mproto.File_mproto_user_auth_proto.Services().ByName("WpAuthService")
	wpAuthServiceWPChallengeMethodDescriptor          = wpAuthServiceServiceDescriptor.Methods().ByName("WPChallenge")
	wpAuthServiceWPluginLoginMethodDescriptor         = wpAuthServiceServiceDescriptor.Methods().ByName("WPluginLogin")
)

// UserAuthServiceClient is a client for the mproto.UserAuthService service.
type UserAuthServiceClient interface {
	// 验证码 verify code
	VerifyCode(context.Context, *connect.Request[mproto.VerifyCodeRequest]) (*connect.Response[mproto.VerifyCodeResponse], error)
	// 用户注册 user regist
	SignUp(context.Context, *connect.Request[mproto.SignUpRequest]) (*connect.Response[mproto.SignUpResponse], error)
	// 用户登陆
	SignIn(context.Context, *connect.Request[mproto.SignInRequest]) (*connect.Response[mproto.SignInResponse], error)
	// 短信验证取回登陆密码
	ForgetPwd(context.Context, *connect.Request[mproto.ForgetPwdRequest]) (*connect.Response[mproto.MsgResponse], error)
	// 短信验证修改资金密码
	UpdateFundPassword(context.Context, *connect.Request[mproto.ForgetPwdRequest]) (*connect.Response[mproto.MsgResponse], error)
}

// NewUserAuthServiceClient constructs a client for the mproto.UserAuthService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserAuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userAuthServiceClient{
		verifyCode: connect.NewClient[mproto.VerifyCodeRequest, mproto.VerifyCodeResponse](
			httpClient,
			baseURL+UserAuthServiceVerifyCodeProcedure,
			connect.WithSchema(userAuthServiceVerifyCodeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		signUp: connect.NewClient[mproto.SignUpRequest, mproto.SignUpResponse](
			httpClient,
			baseURL+UserAuthServiceSignUpProcedure,
			connect.WithSchema(userAuthServiceSignUpMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		signIn: connect.NewClient[mproto.SignInRequest, mproto.SignInResponse](
			httpClient,
			baseURL+UserAuthServiceSignInProcedure,
			connect.WithSchema(userAuthServiceSignInMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		forgetPwd: connect.NewClient[mproto.ForgetPwdRequest, mproto.MsgResponse](
			httpClient,
			baseURL+UserAuthServiceForgetPwdProcedure,
			connect.WithSchema(userAuthServiceForgetPwdMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateFundPassword: connect.NewClient[mproto.ForgetPwdRequest, mproto.MsgResponse](
			httpClient,
			baseURL+UserAuthServiceUpdateFundPasswordProcedure,
			connect.WithSchema(userAuthServiceUpdateFundPasswordMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// userAuthServiceClient implements UserAuthServiceClient.
type userAuthServiceClient struct {
	verifyCode         *connect.Client[mproto.VerifyCodeRequest, mproto.VerifyCodeResponse]
	signUp             *connect.Client[mproto.SignUpRequest, mproto.SignUpResponse]
	signIn             *connect.Client[mproto.SignInRequest, mproto.SignInResponse]
	forgetPwd          *connect.Client[mproto.ForgetPwdRequest, mproto.MsgResponse]
	updateFundPassword *connect.Client[mproto.ForgetPwdRequest, mproto.MsgResponse]
}

// VerifyCode calls mproto.UserAuthService.VerifyCode.
func (c *userAuthServiceClient) VerifyCode(ctx context.Context, req *connect.Request[mproto.VerifyCodeRequest]) (*connect.Response[mproto.VerifyCodeResponse], error) {
	return c.verifyCode.CallUnary(ctx, req)
}

// SignUp calls mproto.UserAuthService.SignUp.
func (c *userAuthServiceClient) SignUp(ctx context.Context, req *connect.Request[mproto.SignUpRequest]) (*connect.Response[mproto.SignUpResponse], error) {
	return c.signUp.CallUnary(ctx, req)
}

// SignIn calls mproto.UserAuthService.SignIn.
func (c *userAuthServiceClient) SignIn(ctx context.Context, req *connect.Request[mproto.SignInRequest]) (*connect.Response[mproto.SignInResponse], error) {
	return c.signIn.CallUnary(ctx, req)
}

// ForgetPwd calls mproto.UserAuthService.ForgetPwd.
func (c *userAuthServiceClient) ForgetPwd(ctx context.Context, req *connect.Request[mproto.ForgetPwdRequest]) (*connect.Response[mproto.MsgResponse], error) {
	return c.forgetPwd.CallUnary(ctx, req)
}

// UpdateFundPassword calls mproto.UserAuthService.UpdateFundPassword.
func (c *userAuthServiceClient) UpdateFundPassword(ctx context.Context, req *connect.Request[mproto.ForgetPwdRequest]) (*connect.Response[mproto.MsgResponse], error) {
	return c.updateFundPassword.CallUnary(ctx, req)
}

// UserAuthServiceHandler is an implementation of the mproto.UserAuthService service.
type UserAuthServiceHandler interface {
	// 验证码 verify code
	VerifyCode(context.Context, *connect.Request[mproto.VerifyCodeRequest]) (*connect.Response[mproto.VerifyCodeResponse], error)
	// 用户注册 user regist
	SignUp(context.Context, *connect.Request[mproto.SignUpRequest]) (*connect.Response[mproto.SignUpResponse], error)
	// 用户登陆
	SignIn(context.Context, *connect.Request[mproto.SignInRequest]) (*connect.Response[mproto.SignInResponse], error)
	// 短信验证取回登陆密码
	ForgetPwd(context.Context, *connect.Request[mproto.ForgetPwdRequest]) (*connect.Response[mproto.MsgResponse], error)
	// 短信验证修改资金密码
	UpdateFundPassword(context.Context, *connect.Request[mproto.ForgetPwdRequest]) (*connect.Response[mproto.MsgResponse], error)
}

// NewUserAuthServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserAuthServiceHandler(svc UserAuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userAuthServiceVerifyCodeHandler := connect.NewUnaryHandler(
		UserAuthServiceVerifyCodeProcedure,
		svc.VerifyCode,
		connect.WithSchema(userAuthServiceVerifyCodeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userAuthServiceSignUpHandler := connect.NewUnaryHandler(
		UserAuthServiceSignUpProcedure,
		svc.SignUp,
		connect.WithSchema(userAuthServiceSignUpMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userAuthServiceSignInHandler := connect.NewUnaryHandler(
		UserAuthServiceSignInProcedure,
		svc.SignIn,
		connect.WithSchema(userAuthServiceSignInMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userAuthServiceForgetPwdHandler := connect.NewUnaryHandler(
		UserAuthServiceForgetPwdProcedure,
		svc.ForgetPwd,
		connect.WithSchema(userAuthServiceForgetPwdMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userAuthServiceUpdateFundPasswordHandler := connect.NewUnaryHandler(
		UserAuthServiceUpdateFundPasswordProcedure,
		svc.UpdateFundPassword,
		connect.WithSchema(userAuthServiceUpdateFundPasswordMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/mproto.UserAuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserAuthServiceVerifyCodeProcedure:
			userAuthServiceVerifyCodeHandler.ServeHTTP(w, r)
		case UserAuthServiceSignUpProcedure:
			userAuthServiceSignUpHandler.ServeHTTP(w, r)
		case UserAuthServiceSignInProcedure:
			userAuthServiceSignInHandler.ServeHTTP(w, r)
		case UserAuthServiceForgetPwdProcedure:
			userAuthServiceForgetPwdHandler.ServeHTTP(w, r)
		case UserAuthServiceUpdateFundPasswordProcedure:
			userAuthServiceUpdateFundPasswordHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserAuthServiceHandler struct{}

func (UnimplementedUserAuthServiceHandler) VerifyCode(context.Context, *connect.Request[mproto.VerifyCodeRequest]) (*connect.Response[mproto.VerifyCodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserAuthService.VerifyCode is not implemented"))
}

func (UnimplementedUserAuthServiceHandler) SignUp(context.Context, *connect.Request[mproto.SignUpRequest]) (*connect.Response[mproto.SignUpResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserAuthService.SignUp is not implemented"))
}

func (UnimplementedUserAuthServiceHandler) SignIn(context.Context, *connect.Request[mproto.SignInRequest]) (*connect.Response[mproto.SignInResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserAuthService.SignIn is not implemented"))
}

func (UnimplementedUserAuthServiceHandler) ForgetPwd(context.Context, *connect.Request[mproto.ForgetPwdRequest]) (*connect.Response[mproto.MsgResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserAuthService.ForgetPwd is not implemented"))
}

func (UnimplementedUserAuthServiceHandler) UpdateFundPassword(context.Context, *connect.Request[mproto.ForgetPwdRequest]) (*connect.Response[mproto.MsgResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserAuthService.UpdateFundPassword is not implemented"))
}

// WpAuthServiceClient is a client for the mproto.WpAuthService service.
type WpAuthServiceClient interface {
	// okx tron钱包插件登陆：app获取登陆授权码，后续app把授权码签名后，会把签名提交回来。
	WPChallenge(context.Context, *connect.Request[mproto.ChallengeRequest]) (*connect.Response[mproto.ChallengeResponse], error)
	// okx tron钱包插件登陆(WP,wallet plugin): app把授权码签名后，通过这个接口签名提交回来,获得token。
	WPluginLogin(context.Context, *connect.Request[mproto.WPluginLoginRequest]) (*connect.Response[mproto.WPluginLoginResponse], error)
}

// NewWpAuthServiceClient constructs a client for the mproto.WpAuthService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWpAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WpAuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &wpAuthServiceClient{
		wPChallenge: connect.NewClient[mproto.ChallengeRequest, mproto.ChallengeResponse](
			httpClient,
			baseURL+WpAuthServiceWPChallengeProcedure,
			connect.WithSchema(wpAuthServiceWPChallengeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		wPluginLogin: connect.NewClient[mproto.WPluginLoginRequest, mproto.WPluginLoginResponse](
			httpClient,
			baseURL+WpAuthServiceWPluginLoginProcedure,
			connect.WithSchema(wpAuthServiceWPluginLoginMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// wpAuthServiceClient implements WpAuthServiceClient.
type wpAuthServiceClient struct {
	wPChallenge  *connect.Client[mproto.ChallengeRequest, mproto.ChallengeResponse]
	wPluginLogin *connect.Client[mproto.WPluginLoginRequest, mproto.WPluginLoginResponse]
}

// WPChallenge calls mproto.WpAuthService.WPChallenge.
func (c *wpAuthServiceClient) WPChallenge(ctx context.Context, req *connect.Request[mproto.ChallengeRequest]) (*connect.Response[mproto.ChallengeResponse], error) {
	return c.wPChallenge.CallUnary(ctx, req)
}

// WPluginLogin calls mproto.WpAuthService.WPluginLogin.
func (c *wpAuthServiceClient) WPluginLogin(ctx context.Context, req *connect.Request[mproto.WPluginLoginRequest]) (*connect.Response[mproto.WPluginLoginResponse], error) {
	return c.wPluginLogin.CallUnary(ctx, req)
}

// WpAuthServiceHandler is an implementation of the mproto.WpAuthService service.
type WpAuthServiceHandler interface {
	// okx tron钱包插件登陆：app获取登陆授权码，后续app把授权码签名后，会把签名提交回来。
	WPChallenge(context.Context, *connect.Request[mproto.ChallengeRequest]) (*connect.Response[mproto.ChallengeResponse], error)
	// okx tron钱包插件登陆(WP,wallet plugin): app把授权码签名后，通过这个接口签名提交回来,获得token。
	WPluginLogin(context.Context, *connect.Request[mproto.WPluginLoginRequest]) (*connect.Response[mproto.WPluginLoginResponse], error)
}

// NewWpAuthServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWpAuthServiceHandler(svc WpAuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	wpAuthServiceWPChallengeHandler := connect.NewUnaryHandler(
		WpAuthServiceWPChallengeProcedure,
		svc.WPChallenge,
		connect.WithSchema(wpAuthServiceWPChallengeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	wpAuthServiceWPluginLoginHandler := connect.NewUnaryHandler(
		WpAuthServiceWPluginLoginProcedure,
		svc.WPluginLogin,
		connect.WithSchema(wpAuthServiceWPluginLoginMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/mproto.WpAuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WpAuthServiceWPChallengeProcedure:
			wpAuthServiceWPChallengeHandler.ServeHTTP(w, r)
		case WpAuthServiceWPluginLoginProcedure:
			wpAuthServiceWPluginLoginHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWpAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWpAuthServiceHandler struct{}

func (UnimplementedWpAuthServiceHandler) WPChallenge(context.Context, *connect.Request[mproto.ChallengeRequest]) (*connect.Response[mproto.ChallengeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.WpAuthService.WPChallenge is not implemented"))
}

func (UnimplementedWpAuthServiceHandler) WPluginLogin(context.Context, *connect.Request[mproto.WPluginLoginRequest]) (*connect.Response[mproto.WPluginLoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.WpAuthService.WPluginLogin is not implemented"))
}
