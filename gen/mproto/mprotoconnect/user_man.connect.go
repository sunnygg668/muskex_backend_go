// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mproto/user_man.proto

package mprotoconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	mproto "muskex/gen/mproto"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserManServiceName is the fully-qualified name of the UserManService service.
	UserManServiceName = "mproto.UserManService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserManServiceUpdatePwdProcedure is the fully-qualified name of the UserManService's UpdatePwd
	// RPC.
	UserManServiceUpdatePwdProcedure = "/mproto.UserManService/UpdatePwd"
	// UserManServiceInitVerifyFaceProcedure is the fully-qualified name of the UserManService's
	// InitVerifyFace RPC.
	UserManServiceInitVerifyFaceProcedure = "/mproto.UserManService/InitVerifyFace"
	// UserManServiceGetVerifyFaceResProcedure is the fully-qualified name of the UserManService's
	// GetVerifyFaceRes RPC.
	UserManServiceGetVerifyFaceResProcedure = "/mproto.UserManService/GetVerifyFaceRes"
	// UserManServiceSaveIdCardInfoProcedure is the fully-qualified name of the UserManService's
	// SaveIdCardInfo RPC.
	UserManServiceSaveIdCardInfoProcedure = "/mproto.UserManService/SaveIdCardInfo"
	// UserManServiceAssetBalanceListProcedure is the fully-qualified name of the UserManService's
	// AssetBalanceList RPC.
	UserManServiceAssetBalanceListProcedure = "/mproto.UserManService/AssetBalanceList"
	// UserManServiceLevelInfoProcedure is the fully-qualified name of the UserManService's LevelInfo
	// RPC.
	UserManServiceLevelInfoProcedure = "/mproto.UserManService/LevelInfo"
	// UserManServiceUserInfoLevelProcedure is the fully-qualified name of the UserManService's
	// UserInfoLevel RPC.
	UserManServiceUserInfoLevelProcedure = "/mproto.UserManService/UserInfoLevel"
	// UserManServiceAddCardProcedure is the fully-qualified name of the UserManService's AddCard RPC.
	UserManServiceAddCardProcedure = "/mproto.UserManService/AddCard"
	// UserManServiceAddWithdrawAddressProcedure is the fully-qualified name of the UserManService's
	// AddWithdrawAddress RPC.
	UserManServiceAddWithdrawAddressProcedure = "/mproto.UserManService/AddWithdrawAddress"
	// UserManServiceQuickPayMethodListProcedure is the fully-qualified name of the UserManService's
	// QuickPayMethodList RPC.
	UserManServiceQuickPayMethodListProcedure = "/mproto.UserManService/QuickPayMethodList"
	// UserManServiceRechargeListProcedure is the fully-qualified name of the UserManService's
	// RechargeList RPC.
	UserManServiceRechargeListProcedure = "/mproto.UserManService/RechargeList"
	// UserManServiceSubmitRechargeProcedure is the fully-qualified name of the UserManService's
	// SubmitRecharge RPC.
	UserManServiceSubmitRechargeProcedure = "/mproto.UserManService/SubmitRecharge"
	// UserManServiceListWithdrawAddressProcedure is the fully-qualified name of the UserManService's
	// ListWithdrawAddress RPC.
	UserManServiceListWithdrawAddressProcedure = "/mproto.UserManService/ListWithdrawAddress"
	// UserManServiceListCardProcedure is the fully-qualified name of the UserManService's ListCard RPC.
	UserManServiceListCardProcedure = "/mproto.UserManService/ListCard"
	// UserManServiceWithdrawInfoProcedure is the fully-qualified name of the UserManService's
	// WithdrawInfo RPC.
	UserManServiceWithdrawInfoProcedure = "/mproto.UserManService/WithdrawInfo"
	// UserManServiceAssetBalanceWithTipProcedure is the fully-qualified name of the UserManService's
	// AssetBalanceWithTip RPC.
	UserManServiceAssetBalanceWithTipProcedure = "/mproto.UserManService/AssetBalanceWithTip"
	// UserManServiceWithdrawApplyProcedure is the fully-qualified name of the UserManService's
	// WithdrawApply RPC.
	UserManServiceWithdrawApplyProcedure = "/mproto.UserManService/WithdrawApply"
	// UserManServiceListWithdrawProcedure is the fully-qualified name of the UserManService's
	// ListWithdraw RPC.
	UserManServiceListWithdrawProcedure = "/mproto.UserManService/ListWithdraw"
	// UserManServiceLeaseMinerProcedure is the fully-qualified name of the UserManService's LeaseMiner
	// RPC.
	UserManServiceLeaseMinerProcedure = "/mproto.UserManService/LeaseMiner"
	// UserManServiceMinerOrderListProcedure is the fully-qualified name of the UserManService's
	// MinerOrderList RPC.
	UserManServiceMinerOrderListProcedure = "/mproto.UserManService/MinerOrderList"
	// UserManServiceCMWalletInfoProcedure is the fully-qualified name of the UserManService's
	// CMWalletInfo RPC.
	UserManServiceCMWalletInfoProcedure = "/mproto.UserManService/CMWalletInfo"
	// UserManServiceCMTransferOutProcedure is the fully-qualified name of the UserManService's
	// CMTransferOut RPC.
	UserManServiceCMTransferOutProcedure = "/mproto.UserManService/CMTransferOut"
	// UserManServiceCMTransferInProcedure is the fully-qualified name of the UserManService's
	// CMTransferIn RPC.
	UserManServiceCMTransferInProcedure = "/mproto.UserManService/CMTransferIn"
	// UserManServiceManChangeListProcedure is the fully-qualified name of the UserManService's
	// ManChangeList RPC.
	UserManServiceManChangeListProcedure = "/mproto.UserManService/ManChangeList"
	// UserManServiceCommissionPoolIndexProcedure is the fully-qualified name of the UserManService's
	// CommissionPoolIndex RPC.
	UserManServiceCommissionPoolIndexProcedure = "/mproto.UserManService/CommissionPoolIndex"
	// UserManServiceCommissionChangeListProcedure is the fully-qualified name of the UserManService's
	// CommissionChangeList RPC.
	UserManServiceCommissionChangeListProcedure = "/mproto.UserManService/CommissionChangeList"
	// UserManServiceCommissionCollectProcedure is the fully-qualified name of the UserManService's
	// CommissionCollect RPC.
	UserManServiceCommissionCollectProcedure = "/mproto.UserManService/CommissionCollect"
	// UserManServiceLecturerListProcedure is the fully-qualified name of the UserManService's
	// LecturerList RPC.
	UserManServiceLecturerListProcedure = "/mproto.UserManService/LecturerList"
	// UserManServiceManagementOrderListProcedure is the fully-qualified name of the UserManService's
	// ManagementOrderList RPC.
	UserManServiceManagementOrderListProcedure = "/mproto.UserManService/ManagementOrderList"
	// UserManServiceBuyManProcedure is the fully-qualified name of the UserManService's BuyMan RPC.
	UserManServiceBuyManProcedure = "/mproto.UserManService/BuyMan"
	// UserManServiceBuyContractProcedure is the fully-qualified name of the UserManService's
	// BuyContract RPC.
	UserManServiceBuyContractProcedure = "/mproto.UserManService/BuyContract"
	// UserManServiceTradeContractOrderListProcedure is the fully-qualified name of the UserManService's
	// TradeContractOrderList RPC.
	UserManServiceTradeContractOrderListProcedure = "/mproto.UserManService/TradeContractOrderList"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	userManServiceServiceDescriptor                      = mproto.File_mproto_user_man_proto.Services().ByName("UserManService")
	userManServiceUpdatePwdMethodDescriptor              = userManServiceServiceDescriptor.Methods().ByName("UpdatePwd")
	userManServiceInitVerifyFaceMethodDescriptor         = userManServiceServiceDescriptor.Methods().ByName("InitVerifyFace")
	userManServiceGetVerifyFaceResMethodDescriptor       = userManServiceServiceDescriptor.Methods().ByName("GetVerifyFaceRes")
	userManServiceSaveIdCardInfoMethodDescriptor         = userManServiceServiceDescriptor.Methods().ByName("SaveIdCardInfo")
	userManServiceAssetBalanceListMethodDescriptor       = userManServiceServiceDescriptor.Methods().ByName("AssetBalanceList")
	userManServiceLevelInfoMethodDescriptor              = userManServiceServiceDescriptor.Methods().ByName("LevelInfo")
	userManServiceUserInfoLevelMethodDescriptor          = userManServiceServiceDescriptor.Methods().ByName("UserInfoLevel")
	userManServiceAddCardMethodDescriptor                = userManServiceServiceDescriptor.Methods().ByName("AddCard")
	userManServiceAddWithdrawAddressMethodDescriptor     = userManServiceServiceDescriptor.Methods().ByName("AddWithdrawAddress")
	userManServiceQuickPayMethodListMethodDescriptor     = userManServiceServiceDescriptor.Methods().ByName("QuickPayMethodList")
	userManServiceRechargeListMethodDescriptor           = userManServiceServiceDescriptor.Methods().ByName("RechargeList")
	userManServiceSubmitRechargeMethodDescriptor         = userManServiceServiceDescriptor.Methods().ByName("SubmitRecharge")
	userManServiceListWithdrawAddressMethodDescriptor    = userManServiceServiceDescriptor.Methods().ByName("ListWithdrawAddress")
	userManServiceListCardMethodDescriptor               = userManServiceServiceDescriptor.Methods().ByName("ListCard")
	userManServiceWithdrawInfoMethodDescriptor           = userManServiceServiceDescriptor.Methods().ByName("WithdrawInfo")
	userManServiceAssetBalanceWithTipMethodDescriptor    = userManServiceServiceDescriptor.Methods().ByName("AssetBalanceWithTip")
	userManServiceWithdrawApplyMethodDescriptor          = userManServiceServiceDescriptor.Methods().ByName("WithdrawApply")
	userManServiceListWithdrawMethodDescriptor           = userManServiceServiceDescriptor.Methods().ByName("ListWithdraw")
	userManServiceLeaseMinerMethodDescriptor             = userManServiceServiceDescriptor.Methods().ByName("LeaseMiner")
	userManServiceMinerOrderListMethodDescriptor         = userManServiceServiceDescriptor.Methods().ByName("MinerOrderList")
	userManServiceCMWalletInfoMethodDescriptor           = userManServiceServiceDescriptor.Methods().ByName("CMWalletInfo")
	userManServiceCMTransferOutMethodDescriptor          = userManServiceServiceDescriptor.Methods().ByName("CMTransferOut")
	userManServiceCMTransferInMethodDescriptor           = userManServiceServiceDescriptor.Methods().ByName("CMTransferIn")
	userManServiceManChangeListMethodDescriptor          = userManServiceServiceDescriptor.Methods().ByName("ManChangeList")
	userManServiceCommissionPoolIndexMethodDescriptor    = userManServiceServiceDescriptor.Methods().ByName("CommissionPoolIndex")
	userManServiceCommissionChangeListMethodDescriptor   = userManServiceServiceDescriptor.Methods().ByName("CommissionChangeList")
	userManServiceCommissionCollectMethodDescriptor      = userManServiceServiceDescriptor.Methods().ByName("CommissionCollect")
	userManServiceLecturerListMethodDescriptor           = userManServiceServiceDescriptor.Methods().ByName("LecturerList")
	userManServiceManagementOrderListMethodDescriptor    = userManServiceServiceDescriptor.Methods().ByName("ManagementOrderList")
	userManServiceBuyManMethodDescriptor                 = userManServiceServiceDescriptor.Methods().ByName("BuyMan")
	userManServiceBuyContractMethodDescriptor            = userManServiceServiceDescriptor.Methods().ByName("BuyContract")
	userManServiceTradeContractOrderListMethodDescriptor = userManServiceServiceDescriptor.Methods().ByName("TradeContractOrderList")
)

// UserManServiceClient is a client for the mproto.UserManService service.
type UserManServiceClient interface {
	// 修改密码
	UpdatePwd(context.Context, *connect.Request[mproto.UpdatePwdRequest]) (*connect.Response[mproto.UpdatePwdResponse], error)
	// 实名人脸认证初始化： 对应源api realNameAuthentication：响应内容为aliyun的原始结果，需要在测试中确定失败和成功的返回内容。
	InitVerifyFace(context.Context, *connect.Request[mproto.InitVerifyFaceRequest]) (*connect.Response[httpbody.HttpBody], error)
	// 实名人脸认证结果： 对应源api realNameAuthentication后的results。 响应内容为aliyun的原始结果,需要在测试中确定失败和成功的返回内容。
	GetVerifyFaceRes(context.Context, *connect.Request[mproto.GetVerifyFaceResRequest]) (*connect.Response[httpbody.HttpBody], error)
	// 保存实名认证身份证信息
	SaveIdCardInfo(context.Context, *connect.Request[mproto.IdCardInfo]) (*connect.Response[mproto.MsgResponse], error)
	// /源api /api/user_assets/assetsInfo
	AssetBalanceList(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.AssetBalanceListResponse], error)
	// 源api /api/index/levelInfo
	LevelInfo(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.LevelInfoResponse], error)
	// 用户等及信息，对应旧项目的 /api/user/userInfo
	UserInfoLevel(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.UserInfoLevelResponse], error)
	// 添加addcard 对应旧项目的 /api/financial_card/add
	AddCard(context.Context, *connect.Request[mproto.AddCardRequest]) (*connect.Response[mproto.NullMsg], error)
	// 源api/api/address/add
	AddWithdrawAddress(context.Context, *connect.Request[mproto.AddWithdrawAddressRequest]) (*connect.Response[mproto.MsgResponse], error)
	// 源api api/financial_recharge/methodList
	QuickPayMethodList(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.QuickPayMethodListResponse], error)
	// 源api api/financial_recharge/rechargeList
	RechargeList(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.RechargeListResponse], error)
	// 快捷充值提交 源api  api/financial_recharge/submitRecharge
	SubmitRecharge(context.Context, *connect.Request[mproto.SubmitRechargeRequest]) (*connect.Response[mproto.SubmitRechargeResponse], error)
	// 提现地址列表 源api/api/address/index  ba_financial_address
	ListWithdrawAddress(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.ListWithdrawAddressResponse], error)
	// 银行卡列表  源api /api/financial_card/list
	ListCard(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.ListCardtResponse], error)
	// 提现相关配制信息接口：  汇率 tip...  源api /api/withdraw/info
	WithdrawInfo(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.WithdrawInfoResponse], error)
	// 参数 coin_id： usdt的id 为1 ，默认为1.
	AssetBalanceWithTip(context.Context, *connect.Request[mproto.IdParam]) (*connect.Response[mproto.AssetBalanceWithTipResponse], error)
	// 提现申请 源api /api/withdraw/apply
	WithdrawApply(context.Context, *connect.Request[mproto.WithdrawApplyRquest]) (*connect.Response[mproto.MsgResponse], error)
	// 提现列表: str参数提交 “0” 或 “1”： /api/withdraw/list
	// 对于 加密记录目前只有USDT,前端写死使USDT即可
	ListWithdraw(context.Context, *connect.Request[mproto.StringParam]) (*connect.Response[mproto.ListWithdrawResponse], error)
	// 租赁矿机
	LeaseMiner(context.Context, *connect.Request[mproto.LeaseMinerRequest]) (*connect.Response[mproto.MsgResponse], error)
	// 矿机定单列表 源ip /api/miners_order/list
	MinerOrderList(context.Context, *connect.Request[mproto.MinerOrderListRequest]) (*connect.Response[mproto.MinerOrderListResponse], error)
	// 理财钱包余额信息api 源api: /api/user/walletInfo
	CMWalletInfo(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.WalletBalance], error)
	// 理财钱转出api  源api: /api/coin_management/transferOut
	CMTransferOut(context.Context, *connect.Request[mproto.TransferRequest]) (*connect.Response[mproto.MsgResponse], error)
	// 理财钱包转入api  源api: /api/coin_management/transferIn
	CMTransferIn(context.Context, *connect.Request[mproto.TransferRequest]) (*connect.Response[mproto.MsgResponse], error)
	// 余额宝记录   源api: /api/coin_change/managementIncomeList
	ManChangeList(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.ManChangeListResponse], error)
	// 佣金池首页 源api: api/commission_pool/index
	CommissionPoolIndex(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.CommissionPoolIndexResponse], error)
	// 佣金池记录 源api: api/commission_pool/changeList
	CommissionChangeList(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.CommissionChangeListResponse], error)
	// api/commission_pool/collect
	CommissionCollect(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.MsgResponse], error)
	// 导师社区列表 源api:api/lecturer/index
	LecturerList(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.LecturerListResponse], error)
	// 理财定单列表
	ManagementOrderList(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.ManagementOrderListResponse], error)
	// 购买理财 源api:/api/coin_management/buy
	BuyMan(context.Context, *connect.Request[mproto.BuyManRequest]) (*connect.Response[mproto.MsgResponse], error)
	// 购买合约  源api:api/contract_order/buy
	BuyContract(context.Context, *connect.Request[mproto.BuyContractRequest]) (*connect.Response[mproto.MsgResponse], error)
	// 合约定单列表  源api: api/contract_order/list ;仅一个参数id，做为status使用
	TradeContractOrderList(context.Context, *connect.Request[mproto.IdParam]) (*connect.Response[mproto.TradeContractOrderListResponse], error)
}

// NewUserManServiceClient constructs a client for the mproto.UserManService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserManServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserManServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userManServiceClient{
		updatePwd: connect.NewClient[mproto.UpdatePwdRequest, mproto.UpdatePwdResponse](
			httpClient,
			baseURL+UserManServiceUpdatePwdProcedure,
			connect.WithSchema(userManServiceUpdatePwdMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		initVerifyFace: connect.NewClient[mproto.InitVerifyFaceRequest, httpbody.HttpBody](
			httpClient,
			baseURL+UserManServiceInitVerifyFaceProcedure,
			connect.WithSchema(userManServiceInitVerifyFaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getVerifyFaceRes: connect.NewClient[mproto.GetVerifyFaceResRequest, httpbody.HttpBody](
			httpClient,
			baseURL+UserManServiceGetVerifyFaceResProcedure,
			connect.WithSchema(userManServiceGetVerifyFaceResMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		saveIdCardInfo: connect.NewClient[mproto.IdCardInfo, mproto.MsgResponse](
			httpClient,
			baseURL+UserManServiceSaveIdCardInfoProcedure,
			connect.WithSchema(userManServiceSaveIdCardInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		assetBalanceList: connect.NewClient[mproto.NullMsg, mproto.AssetBalanceListResponse](
			httpClient,
			baseURL+UserManServiceAssetBalanceListProcedure,
			connect.WithSchema(userManServiceAssetBalanceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		levelInfo: connect.NewClient[mproto.NullMsg, mproto.LevelInfoResponse](
			httpClient,
			baseURL+UserManServiceLevelInfoProcedure,
			connect.WithSchema(userManServiceLevelInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		userInfoLevel: connect.NewClient[mproto.NullMsg, mproto.UserInfoLevelResponse](
			httpClient,
			baseURL+UserManServiceUserInfoLevelProcedure,
			connect.WithSchema(userManServiceUserInfoLevelMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addCard: connect.NewClient[mproto.AddCardRequest, mproto.NullMsg](
			httpClient,
			baseURL+UserManServiceAddCardProcedure,
			connect.WithSchema(userManServiceAddCardMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addWithdrawAddress: connect.NewClient[mproto.AddWithdrawAddressRequest, mproto.MsgResponse](
			httpClient,
			baseURL+UserManServiceAddWithdrawAddressProcedure,
			connect.WithSchema(userManServiceAddWithdrawAddressMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		quickPayMethodList: connect.NewClient[mproto.NullMsg, mproto.QuickPayMethodListResponse](
			httpClient,
			baseURL+UserManServiceQuickPayMethodListProcedure,
			connect.WithSchema(userManServiceQuickPayMethodListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		rechargeList: connect.NewClient[mproto.NullMsg, mproto.RechargeListResponse](
			httpClient,
			baseURL+UserManServiceRechargeListProcedure,
			connect.WithSchema(userManServiceRechargeListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		submitRecharge: connect.NewClient[mproto.SubmitRechargeRequest, mproto.SubmitRechargeResponse](
			httpClient,
			baseURL+UserManServiceSubmitRechargeProcedure,
			connect.WithSchema(userManServiceSubmitRechargeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listWithdrawAddress: connect.NewClient[mproto.NullMsg, mproto.ListWithdrawAddressResponse](
			httpClient,
			baseURL+UserManServiceListWithdrawAddressProcedure,
			connect.WithSchema(userManServiceListWithdrawAddressMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listCard: connect.NewClient[mproto.NullMsg, mproto.ListCardtResponse](
			httpClient,
			baseURL+UserManServiceListCardProcedure,
			connect.WithSchema(userManServiceListCardMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		withdrawInfo: connect.NewClient[mproto.NullMsg, mproto.WithdrawInfoResponse](
			httpClient,
			baseURL+UserManServiceWithdrawInfoProcedure,
			connect.WithSchema(userManServiceWithdrawInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		assetBalanceWithTip: connect.NewClient[mproto.IdParam, mproto.AssetBalanceWithTipResponse](
			httpClient,
			baseURL+UserManServiceAssetBalanceWithTipProcedure,
			connect.WithSchema(userManServiceAssetBalanceWithTipMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		withdrawApply: connect.NewClient[mproto.WithdrawApplyRquest, mproto.MsgResponse](
			httpClient,
			baseURL+UserManServiceWithdrawApplyProcedure,
			connect.WithSchema(userManServiceWithdrawApplyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listWithdraw: connect.NewClient[mproto.StringParam, mproto.ListWithdrawResponse](
			httpClient,
			baseURL+UserManServiceListWithdrawProcedure,
			connect.WithSchema(userManServiceListWithdrawMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		leaseMiner: connect.NewClient[mproto.LeaseMinerRequest, mproto.MsgResponse](
			httpClient,
			baseURL+UserManServiceLeaseMinerProcedure,
			connect.WithSchema(userManServiceLeaseMinerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		minerOrderList: connect.NewClient[mproto.MinerOrderListRequest, mproto.MinerOrderListResponse](
			httpClient,
			baseURL+UserManServiceMinerOrderListProcedure,
			connect.WithSchema(userManServiceMinerOrderListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		cMWalletInfo: connect.NewClient[mproto.NullMsg, mproto.WalletBalance](
			httpClient,
			baseURL+UserManServiceCMWalletInfoProcedure,
			connect.WithSchema(userManServiceCMWalletInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		cMTransferOut: connect.NewClient[mproto.TransferRequest, mproto.MsgResponse](
			httpClient,
			baseURL+UserManServiceCMTransferOutProcedure,
			connect.WithSchema(userManServiceCMTransferOutMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		cMTransferIn: connect.NewClient[mproto.TransferRequest, mproto.MsgResponse](
			httpClient,
			baseURL+UserManServiceCMTransferInProcedure,
			connect.WithSchema(userManServiceCMTransferInMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		manChangeList: connect.NewClient[mproto.NullMsg, mproto.ManChangeListResponse](
			httpClient,
			baseURL+UserManServiceManChangeListProcedure,
			connect.WithSchema(userManServiceManChangeListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		commissionPoolIndex: connect.NewClient[mproto.NullMsg, mproto.CommissionPoolIndexResponse](
			httpClient,
			baseURL+UserManServiceCommissionPoolIndexProcedure,
			connect.WithSchema(userManServiceCommissionPoolIndexMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		commissionChangeList: connect.NewClient[mproto.NullMsg, mproto.CommissionChangeListResponse](
			httpClient,
			baseURL+UserManServiceCommissionChangeListProcedure,
			connect.WithSchema(userManServiceCommissionChangeListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		commissionCollect: connect.NewClient[mproto.NullMsg, mproto.MsgResponse](
			httpClient,
			baseURL+UserManServiceCommissionCollectProcedure,
			connect.WithSchema(userManServiceCommissionCollectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		lecturerList: connect.NewClient[mproto.NullMsg, mproto.LecturerListResponse](
			httpClient,
			baseURL+UserManServiceLecturerListProcedure,
			connect.WithSchema(userManServiceLecturerListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		managementOrderList: connect.NewClient[mproto.NullMsg, mproto.ManagementOrderListResponse](
			httpClient,
			baseURL+UserManServiceManagementOrderListProcedure,
			connect.WithSchema(userManServiceManagementOrderListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		buyMan: connect.NewClient[mproto.BuyManRequest, mproto.MsgResponse](
			httpClient,
			baseURL+UserManServiceBuyManProcedure,
			connect.WithSchema(userManServiceBuyManMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		buyContract: connect.NewClient[mproto.BuyContractRequest, mproto.MsgResponse](
			httpClient,
			baseURL+UserManServiceBuyContractProcedure,
			connect.WithSchema(userManServiceBuyContractMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		tradeContractOrderList: connect.NewClient[mproto.IdParam, mproto.TradeContractOrderListResponse](
			httpClient,
			baseURL+UserManServiceTradeContractOrderListProcedure,
			connect.WithSchema(userManServiceTradeContractOrderListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// userManServiceClient implements UserManServiceClient.
type userManServiceClient struct {
	updatePwd              *connect.Client[mproto.UpdatePwdRequest, mproto.UpdatePwdResponse]
	initVerifyFace         *connect.Client[mproto.InitVerifyFaceRequest, httpbody.HttpBody]
	getVerifyFaceRes       *connect.Client[mproto.GetVerifyFaceResRequest, httpbody.HttpBody]
	saveIdCardInfo         *connect.Client[mproto.IdCardInfo, mproto.MsgResponse]
	assetBalanceList       *connect.Client[mproto.NullMsg, mproto.AssetBalanceListResponse]
	levelInfo              *connect.Client[mproto.NullMsg, mproto.LevelInfoResponse]
	userInfoLevel          *connect.Client[mproto.NullMsg, mproto.UserInfoLevelResponse]
	addCard                *connect.Client[mproto.AddCardRequest, mproto.NullMsg]
	addWithdrawAddress     *connect.Client[mproto.AddWithdrawAddressRequest, mproto.MsgResponse]
	quickPayMethodList     *connect.Client[mproto.NullMsg, mproto.QuickPayMethodListResponse]
	rechargeList           *connect.Client[mproto.NullMsg, mproto.RechargeListResponse]
	submitRecharge         *connect.Client[mproto.SubmitRechargeRequest, mproto.SubmitRechargeResponse]
	listWithdrawAddress    *connect.Client[mproto.NullMsg, mproto.ListWithdrawAddressResponse]
	listCard               *connect.Client[mproto.NullMsg, mproto.ListCardtResponse]
	withdrawInfo           *connect.Client[mproto.NullMsg, mproto.WithdrawInfoResponse]
	assetBalanceWithTip    *connect.Client[mproto.IdParam, mproto.AssetBalanceWithTipResponse]
	withdrawApply          *connect.Client[mproto.WithdrawApplyRquest, mproto.MsgResponse]
	listWithdraw           *connect.Client[mproto.StringParam, mproto.ListWithdrawResponse]
	leaseMiner             *connect.Client[mproto.LeaseMinerRequest, mproto.MsgResponse]
	minerOrderList         *connect.Client[mproto.MinerOrderListRequest, mproto.MinerOrderListResponse]
	cMWalletInfo           *connect.Client[mproto.NullMsg, mproto.WalletBalance]
	cMTransferOut          *connect.Client[mproto.TransferRequest, mproto.MsgResponse]
	cMTransferIn           *connect.Client[mproto.TransferRequest, mproto.MsgResponse]
	manChangeList          *connect.Client[mproto.NullMsg, mproto.ManChangeListResponse]
	commissionPoolIndex    *connect.Client[mproto.NullMsg, mproto.CommissionPoolIndexResponse]
	commissionChangeList   *connect.Client[mproto.NullMsg, mproto.CommissionChangeListResponse]
	commissionCollect      *connect.Client[mproto.NullMsg, mproto.MsgResponse]
	lecturerList           *connect.Client[mproto.NullMsg, mproto.LecturerListResponse]
	managementOrderList    *connect.Client[mproto.NullMsg, mproto.ManagementOrderListResponse]
	buyMan                 *connect.Client[mproto.BuyManRequest, mproto.MsgResponse]
	buyContract            *connect.Client[mproto.BuyContractRequest, mproto.MsgResponse]
	tradeContractOrderList *connect.Client[mproto.IdParam, mproto.TradeContractOrderListResponse]
}

// UpdatePwd calls mproto.UserManService.UpdatePwd.
func (c *userManServiceClient) UpdatePwd(ctx context.Context, req *connect.Request[mproto.UpdatePwdRequest]) (*connect.Response[mproto.UpdatePwdResponse], error) {
	return c.updatePwd.CallUnary(ctx, req)
}

// InitVerifyFace calls mproto.UserManService.InitVerifyFace.
func (c *userManServiceClient) InitVerifyFace(ctx context.Context, req *connect.Request[mproto.InitVerifyFaceRequest]) (*connect.Response[httpbody.HttpBody], error) {
	return c.initVerifyFace.CallUnary(ctx, req)
}

// GetVerifyFaceRes calls mproto.UserManService.GetVerifyFaceRes.
func (c *userManServiceClient) GetVerifyFaceRes(ctx context.Context, req *connect.Request[mproto.GetVerifyFaceResRequest]) (*connect.Response[httpbody.HttpBody], error) {
	return c.getVerifyFaceRes.CallUnary(ctx, req)
}

// SaveIdCardInfo calls mproto.UserManService.SaveIdCardInfo.
func (c *userManServiceClient) SaveIdCardInfo(ctx context.Context, req *connect.Request[mproto.IdCardInfo]) (*connect.Response[mproto.MsgResponse], error) {
	return c.saveIdCardInfo.CallUnary(ctx, req)
}

// AssetBalanceList calls mproto.UserManService.AssetBalanceList.
func (c *userManServiceClient) AssetBalanceList(ctx context.Context, req *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.AssetBalanceListResponse], error) {
	return c.assetBalanceList.CallUnary(ctx, req)
}

// LevelInfo calls mproto.UserManService.LevelInfo.
func (c *userManServiceClient) LevelInfo(ctx context.Context, req *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.LevelInfoResponse], error) {
	return c.levelInfo.CallUnary(ctx, req)
}

// UserInfoLevel calls mproto.UserManService.UserInfoLevel.
func (c *userManServiceClient) UserInfoLevel(ctx context.Context, req *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.UserInfoLevelResponse], error) {
	return c.userInfoLevel.CallUnary(ctx, req)
}

// AddCard calls mproto.UserManService.AddCard.
func (c *userManServiceClient) AddCard(ctx context.Context, req *connect.Request[mproto.AddCardRequest]) (*connect.Response[mproto.NullMsg], error) {
	return c.addCard.CallUnary(ctx, req)
}

// AddWithdrawAddress calls mproto.UserManService.AddWithdrawAddress.
func (c *userManServiceClient) AddWithdrawAddress(ctx context.Context, req *connect.Request[mproto.AddWithdrawAddressRequest]) (*connect.Response[mproto.MsgResponse], error) {
	return c.addWithdrawAddress.CallUnary(ctx, req)
}

// QuickPayMethodList calls mproto.UserManService.QuickPayMethodList.
func (c *userManServiceClient) QuickPayMethodList(ctx context.Context, req *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.QuickPayMethodListResponse], error) {
	return c.quickPayMethodList.CallUnary(ctx, req)
}

// RechargeList calls mproto.UserManService.RechargeList.
func (c *userManServiceClient) RechargeList(ctx context.Context, req *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.RechargeListResponse], error) {
	return c.rechargeList.CallUnary(ctx, req)
}

// SubmitRecharge calls mproto.UserManService.SubmitRecharge.
func (c *userManServiceClient) SubmitRecharge(ctx context.Context, req *connect.Request[mproto.SubmitRechargeRequest]) (*connect.Response[mproto.SubmitRechargeResponse], error) {
	return c.submitRecharge.CallUnary(ctx, req)
}

// ListWithdrawAddress calls mproto.UserManService.ListWithdrawAddress.
func (c *userManServiceClient) ListWithdrawAddress(ctx context.Context, req *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.ListWithdrawAddressResponse], error) {
	return c.listWithdrawAddress.CallUnary(ctx, req)
}

// ListCard calls mproto.UserManService.ListCard.
func (c *userManServiceClient) ListCard(ctx context.Context, req *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.ListCardtResponse], error) {
	return c.listCard.CallUnary(ctx, req)
}

// WithdrawInfo calls mproto.UserManService.WithdrawInfo.
func (c *userManServiceClient) WithdrawInfo(ctx context.Context, req *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.WithdrawInfoResponse], error) {
	return c.withdrawInfo.CallUnary(ctx, req)
}

// AssetBalanceWithTip calls mproto.UserManService.AssetBalanceWithTip.
func (c *userManServiceClient) AssetBalanceWithTip(ctx context.Context, req *connect.Request[mproto.IdParam]) (*connect.Response[mproto.AssetBalanceWithTipResponse], error) {
	return c.assetBalanceWithTip.CallUnary(ctx, req)
}

// WithdrawApply calls mproto.UserManService.WithdrawApply.
func (c *userManServiceClient) WithdrawApply(ctx context.Context, req *connect.Request[mproto.WithdrawApplyRquest]) (*connect.Response[mproto.MsgResponse], error) {
	return c.withdrawApply.CallUnary(ctx, req)
}

// ListWithdraw calls mproto.UserManService.ListWithdraw.
func (c *userManServiceClient) ListWithdraw(ctx context.Context, req *connect.Request[mproto.StringParam]) (*connect.Response[mproto.ListWithdrawResponse], error) {
	return c.listWithdraw.CallUnary(ctx, req)
}

// LeaseMiner calls mproto.UserManService.LeaseMiner.
func (c *userManServiceClient) LeaseMiner(ctx context.Context, req *connect.Request[mproto.LeaseMinerRequest]) (*connect.Response[mproto.MsgResponse], error) {
	return c.leaseMiner.CallUnary(ctx, req)
}

// MinerOrderList calls mproto.UserManService.MinerOrderList.
func (c *userManServiceClient) MinerOrderList(ctx context.Context, req *connect.Request[mproto.MinerOrderListRequest]) (*connect.Response[mproto.MinerOrderListResponse], error) {
	return c.minerOrderList.CallUnary(ctx, req)
}

// CMWalletInfo calls mproto.UserManService.CMWalletInfo.
func (c *userManServiceClient) CMWalletInfo(ctx context.Context, req *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.WalletBalance], error) {
	return c.cMWalletInfo.CallUnary(ctx, req)
}

// CMTransferOut calls mproto.UserManService.CMTransferOut.
func (c *userManServiceClient) CMTransferOut(ctx context.Context, req *connect.Request[mproto.TransferRequest]) (*connect.Response[mproto.MsgResponse], error) {
	return c.cMTransferOut.CallUnary(ctx, req)
}

// CMTransferIn calls mproto.UserManService.CMTransferIn.
func (c *userManServiceClient) CMTransferIn(ctx context.Context, req *connect.Request[mproto.TransferRequest]) (*connect.Response[mproto.MsgResponse], error) {
	return c.cMTransferIn.CallUnary(ctx, req)
}

// ManChangeList calls mproto.UserManService.ManChangeList.
func (c *userManServiceClient) ManChangeList(ctx context.Context, req *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.ManChangeListResponse], error) {
	return c.manChangeList.CallUnary(ctx, req)
}

// CommissionPoolIndex calls mproto.UserManService.CommissionPoolIndex.
func (c *userManServiceClient) CommissionPoolIndex(ctx context.Context, req *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.CommissionPoolIndexResponse], error) {
	return c.commissionPoolIndex.CallUnary(ctx, req)
}

// CommissionChangeList calls mproto.UserManService.CommissionChangeList.
func (c *userManServiceClient) CommissionChangeList(ctx context.Context, req *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.CommissionChangeListResponse], error) {
	return c.commissionChangeList.CallUnary(ctx, req)
}

// CommissionCollect calls mproto.UserManService.CommissionCollect.
func (c *userManServiceClient) CommissionCollect(ctx context.Context, req *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.MsgResponse], error) {
	return c.commissionCollect.CallUnary(ctx, req)
}

// LecturerList calls mproto.UserManService.LecturerList.
func (c *userManServiceClient) LecturerList(ctx context.Context, req *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.LecturerListResponse], error) {
	return c.lecturerList.CallUnary(ctx, req)
}

// ManagementOrderList calls mproto.UserManService.ManagementOrderList.
func (c *userManServiceClient) ManagementOrderList(ctx context.Context, req *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.ManagementOrderListResponse], error) {
	return c.managementOrderList.CallUnary(ctx, req)
}

// BuyMan calls mproto.UserManService.BuyMan.
func (c *userManServiceClient) BuyMan(ctx context.Context, req *connect.Request[mproto.BuyManRequest]) (*connect.Response[mproto.MsgResponse], error) {
	return c.buyMan.CallUnary(ctx, req)
}

// BuyContract calls mproto.UserManService.BuyContract.
func (c *userManServiceClient) BuyContract(ctx context.Context, req *connect.Request[mproto.BuyContractRequest]) (*connect.Response[mproto.MsgResponse], error) {
	return c.buyContract.CallUnary(ctx, req)
}

// TradeContractOrderList calls mproto.UserManService.TradeContractOrderList.
func (c *userManServiceClient) TradeContractOrderList(ctx context.Context, req *connect.Request[mproto.IdParam]) (*connect.Response[mproto.TradeContractOrderListResponse], error) {
	return c.tradeContractOrderList.CallUnary(ctx, req)
}

// UserManServiceHandler is an implementation of the mproto.UserManService service.
type UserManServiceHandler interface {
	// 修改密码
	UpdatePwd(context.Context, *connect.Request[mproto.UpdatePwdRequest]) (*connect.Response[mproto.UpdatePwdResponse], error)
	// 实名人脸认证初始化： 对应源api realNameAuthentication：响应内容为aliyun的原始结果，需要在测试中确定失败和成功的返回内容。
	InitVerifyFace(context.Context, *connect.Request[mproto.InitVerifyFaceRequest]) (*connect.Response[httpbody.HttpBody], error)
	// 实名人脸认证结果： 对应源api realNameAuthentication后的results。 响应内容为aliyun的原始结果,需要在测试中确定失败和成功的返回内容。
	GetVerifyFaceRes(context.Context, *connect.Request[mproto.GetVerifyFaceResRequest]) (*connect.Response[httpbody.HttpBody], error)
	// 保存实名认证身份证信息
	SaveIdCardInfo(context.Context, *connect.Request[mproto.IdCardInfo]) (*connect.Response[mproto.MsgResponse], error)
	// /源api /api/user_assets/assetsInfo
	AssetBalanceList(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.AssetBalanceListResponse], error)
	// 源api /api/index/levelInfo
	LevelInfo(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.LevelInfoResponse], error)
	// 用户等及信息，对应旧项目的 /api/user/userInfo
	UserInfoLevel(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.UserInfoLevelResponse], error)
	// 添加addcard 对应旧项目的 /api/financial_card/add
	AddCard(context.Context, *connect.Request[mproto.AddCardRequest]) (*connect.Response[mproto.NullMsg], error)
	// 源api/api/address/add
	AddWithdrawAddress(context.Context, *connect.Request[mproto.AddWithdrawAddressRequest]) (*connect.Response[mproto.MsgResponse], error)
	// 源api api/financial_recharge/methodList
	QuickPayMethodList(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.QuickPayMethodListResponse], error)
	// 源api api/financial_recharge/rechargeList
	RechargeList(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.RechargeListResponse], error)
	// 快捷充值提交 源api  api/financial_recharge/submitRecharge
	SubmitRecharge(context.Context, *connect.Request[mproto.SubmitRechargeRequest]) (*connect.Response[mproto.SubmitRechargeResponse], error)
	// 提现地址列表 源api/api/address/index  ba_financial_address
	ListWithdrawAddress(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.ListWithdrawAddressResponse], error)
	// 银行卡列表  源api /api/financial_card/list
	ListCard(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.ListCardtResponse], error)
	// 提现相关配制信息接口：  汇率 tip...  源api /api/withdraw/info
	WithdrawInfo(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.WithdrawInfoResponse], error)
	// 参数 coin_id： usdt的id 为1 ，默认为1.
	AssetBalanceWithTip(context.Context, *connect.Request[mproto.IdParam]) (*connect.Response[mproto.AssetBalanceWithTipResponse], error)
	// 提现申请 源api /api/withdraw/apply
	WithdrawApply(context.Context, *connect.Request[mproto.WithdrawApplyRquest]) (*connect.Response[mproto.MsgResponse], error)
	// 提现列表: str参数提交 “0” 或 “1”： /api/withdraw/list
	// 对于 加密记录目前只有USDT,前端写死使USDT即可
	ListWithdraw(context.Context, *connect.Request[mproto.StringParam]) (*connect.Response[mproto.ListWithdrawResponse], error)
	// 租赁矿机
	LeaseMiner(context.Context, *connect.Request[mproto.LeaseMinerRequest]) (*connect.Response[mproto.MsgResponse], error)
	// 矿机定单列表 源ip /api/miners_order/list
	MinerOrderList(context.Context, *connect.Request[mproto.MinerOrderListRequest]) (*connect.Response[mproto.MinerOrderListResponse], error)
	// 理财钱包余额信息api 源api: /api/user/walletInfo
	CMWalletInfo(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.WalletBalance], error)
	// 理财钱转出api  源api: /api/coin_management/transferOut
	CMTransferOut(context.Context, *connect.Request[mproto.TransferRequest]) (*connect.Response[mproto.MsgResponse], error)
	// 理财钱包转入api  源api: /api/coin_management/transferIn
	CMTransferIn(context.Context, *connect.Request[mproto.TransferRequest]) (*connect.Response[mproto.MsgResponse], error)
	// 余额宝记录   源api: /api/coin_change/managementIncomeList
	ManChangeList(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.ManChangeListResponse], error)
	// 佣金池首页 源api: api/commission_pool/index
	CommissionPoolIndex(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.CommissionPoolIndexResponse], error)
	// 佣金池记录 源api: api/commission_pool/changeList
	CommissionChangeList(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.CommissionChangeListResponse], error)
	// api/commission_pool/collect
	CommissionCollect(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.MsgResponse], error)
	// 导师社区列表 源api:api/lecturer/index
	LecturerList(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.LecturerListResponse], error)
	// 理财定单列表
	ManagementOrderList(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.ManagementOrderListResponse], error)
	// 购买理财 源api:/api/coin_management/buy
	BuyMan(context.Context, *connect.Request[mproto.BuyManRequest]) (*connect.Response[mproto.MsgResponse], error)
	// 购买合约  源api:api/contract_order/buy
	BuyContract(context.Context, *connect.Request[mproto.BuyContractRequest]) (*connect.Response[mproto.MsgResponse], error)
	// 合约定单列表  源api: api/contract_order/list ;仅一个参数id，做为status使用
	TradeContractOrderList(context.Context, *connect.Request[mproto.IdParam]) (*connect.Response[mproto.TradeContractOrderListResponse], error)
}

// NewUserManServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserManServiceHandler(svc UserManServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userManServiceUpdatePwdHandler := connect.NewUnaryHandler(
		UserManServiceUpdatePwdProcedure,
		svc.UpdatePwd,
		connect.WithSchema(userManServiceUpdatePwdMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userManServiceInitVerifyFaceHandler := connect.NewUnaryHandler(
		UserManServiceInitVerifyFaceProcedure,
		svc.InitVerifyFace,
		connect.WithSchema(userManServiceInitVerifyFaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userManServiceGetVerifyFaceResHandler := connect.NewUnaryHandler(
		UserManServiceGetVerifyFaceResProcedure,
		svc.GetVerifyFaceRes,
		connect.WithSchema(userManServiceGetVerifyFaceResMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userManServiceSaveIdCardInfoHandler := connect.NewUnaryHandler(
		UserManServiceSaveIdCardInfoProcedure,
		svc.SaveIdCardInfo,
		connect.WithSchema(userManServiceSaveIdCardInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userManServiceAssetBalanceListHandler := connect.NewUnaryHandler(
		UserManServiceAssetBalanceListProcedure,
		svc.AssetBalanceList,
		connect.WithSchema(userManServiceAssetBalanceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userManServiceLevelInfoHandler := connect.NewUnaryHandler(
		UserManServiceLevelInfoProcedure,
		svc.LevelInfo,
		connect.WithSchema(userManServiceLevelInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userManServiceUserInfoLevelHandler := connect.NewUnaryHandler(
		UserManServiceUserInfoLevelProcedure,
		svc.UserInfoLevel,
		connect.WithSchema(userManServiceUserInfoLevelMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userManServiceAddCardHandler := connect.NewUnaryHandler(
		UserManServiceAddCardProcedure,
		svc.AddCard,
		connect.WithSchema(userManServiceAddCardMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userManServiceAddWithdrawAddressHandler := connect.NewUnaryHandler(
		UserManServiceAddWithdrawAddressProcedure,
		svc.AddWithdrawAddress,
		connect.WithSchema(userManServiceAddWithdrawAddressMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userManServiceQuickPayMethodListHandler := connect.NewUnaryHandler(
		UserManServiceQuickPayMethodListProcedure,
		svc.QuickPayMethodList,
		connect.WithSchema(userManServiceQuickPayMethodListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userManServiceRechargeListHandler := connect.NewUnaryHandler(
		UserManServiceRechargeListProcedure,
		svc.RechargeList,
		connect.WithSchema(userManServiceRechargeListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userManServiceSubmitRechargeHandler := connect.NewUnaryHandler(
		UserManServiceSubmitRechargeProcedure,
		svc.SubmitRecharge,
		connect.WithSchema(userManServiceSubmitRechargeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userManServiceListWithdrawAddressHandler := connect.NewUnaryHandler(
		UserManServiceListWithdrawAddressProcedure,
		svc.ListWithdrawAddress,
		connect.WithSchema(userManServiceListWithdrawAddressMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userManServiceListCardHandler := connect.NewUnaryHandler(
		UserManServiceListCardProcedure,
		svc.ListCard,
		connect.WithSchema(userManServiceListCardMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userManServiceWithdrawInfoHandler := connect.NewUnaryHandler(
		UserManServiceWithdrawInfoProcedure,
		svc.WithdrawInfo,
		connect.WithSchema(userManServiceWithdrawInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userManServiceAssetBalanceWithTipHandler := connect.NewUnaryHandler(
		UserManServiceAssetBalanceWithTipProcedure,
		svc.AssetBalanceWithTip,
		connect.WithSchema(userManServiceAssetBalanceWithTipMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userManServiceWithdrawApplyHandler := connect.NewUnaryHandler(
		UserManServiceWithdrawApplyProcedure,
		svc.WithdrawApply,
		connect.WithSchema(userManServiceWithdrawApplyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userManServiceListWithdrawHandler := connect.NewUnaryHandler(
		UserManServiceListWithdrawProcedure,
		svc.ListWithdraw,
		connect.WithSchema(userManServiceListWithdrawMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userManServiceLeaseMinerHandler := connect.NewUnaryHandler(
		UserManServiceLeaseMinerProcedure,
		svc.LeaseMiner,
		connect.WithSchema(userManServiceLeaseMinerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userManServiceMinerOrderListHandler := connect.NewUnaryHandler(
		UserManServiceMinerOrderListProcedure,
		svc.MinerOrderList,
		connect.WithSchema(userManServiceMinerOrderListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userManServiceCMWalletInfoHandler := connect.NewUnaryHandler(
		UserManServiceCMWalletInfoProcedure,
		svc.CMWalletInfo,
		connect.WithSchema(userManServiceCMWalletInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userManServiceCMTransferOutHandler := connect.NewUnaryHandler(
		UserManServiceCMTransferOutProcedure,
		svc.CMTransferOut,
		connect.WithSchema(userManServiceCMTransferOutMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userManServiceCMTransferInHandler := connect.NewUnaryHandler(
		UserManServiceCMTransferInProcedure,
		svc.CMTransferIn,
		connect.WithSchema(userManServiceCMTransferInMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userManServiceManChangeListHandler := connect.NewUnaryHandler(
		UserManServiceManChangeListProcedure,
		svc.ManChangeList,
		connect.WithSchema(userManServiceManChangeListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userManServiceCommissionPoolIndexHandler := connect.NewUnaryHandler(
		UserManServiceCommissionPoolIndexProcedure,
		svc.CommissionPoolIndex,
		connect.WithSchema(userManServiceCommissionPoolIndexMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userManServiceCommissionChangeListHandler := connect.NewUnaryHandler(
		UserManServiceCommissionChangeListProcedure,
		svc.CommissionChangeList,
		connect.WithSchema(userManServiceCommissionChangeListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userManServiceCommissionCollectHandler := connect.NewUnaryHandler(
		UserManServiceCommissionCollectProcedure,
		svc.CommissionCollect,
		connect.WithSchema(userManServiceCommissionCollectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userManServiceLecturerListHandler := connect.NewUnaryHandler(
		UserManServiceLecturerListProcedure,
		svc.LecturerList,
		connect.WithSchema(userManServiceLecturerListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userManServiceManagementOrderListHandler := connect.NewUnaryHandler(
		UserManServiceManagementOrderListProcedure,
		svc.ManagementOrderList,
		connect.WithSchema(userManServiceManagementOrderListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userManServiceBuyManHandler := connect.NewUnaryHandler(
		UserManServiceBuyManProcedure,
		svc.BuyMan,
		connect.WithSchema(userManServiceBuyManMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userManServiceBuyContractHandler := connect.NewUnaryHandler(
		UserManServiceBuyContractProcedure,
		svc.BuyContract,
		connect.WithSchema(userManServiceBuyContractMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userManServiceTradeContractOrderListHandler := connect.NewUnaryHandler(
		UserManServiceTradeContractOrderListProcedure,
		svc.TradeContractOrderList,
		connect.WithSchema(userManServiceTradeContractOrderListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/mproto.UserManService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserManServiceUpdatePwdProcedure:
			userManServiceUpdatePwdHandler.ServeHTTP(w, r)
		case UserManServiceInitVerifyFaceProcedure:
			userManServiceInitVerifyFaceHandler.ServeHTTP(w, r)
		case UserManServiceGetVerifyFaceResProcedure:
			userManServiceGetVerifyFaceResHandler.ServeHTTP(w, r)
		case UserManServiceSaveIdCardInfoProcedure:
			userManServiceSaveIdCardInfoHandler.ServeHTTP(w, r)
		case UserManServiceAssetBalanceListProcedure:
			userManServiceAssetBalanceListHandler.ServeHTTP(w, r)
		case UserManServiceLevelInfoProcedure:
			userManServiceLevelInfoHandler.ServeHTTP(w, r)
		case UserManServiceUserInfoLevelProcedure:
			userManServiceUserInfoLevelHandler.ServeHTTP(w, r)
		case UserManServiceAddCardProcedure:
			userManServiceAddCardHandler.ServeHTTP(w, r)
		case UserManServiceAddWithdrawAddressProcedure:
			userManServiceAddWithdrawAddressHandler.ServeHTTP(w, r)
		case UserManServiceQuickPayMethodListProcedure:
			userManServiceQuickPayMethodListHandler.ServeHTTP(w, r)
		case UserManServiceRechargeListProcedure:
			userManServiceRechargeListHandler.ServeHTTP(w, r)
		case UserManServiceSubmitRechargeProcedure:
			userManServiceSubmitRechargeHandler.ServeHTTP(w, r)
		case UserManServiceListWithdrawAddressProcedure:
			userManServiceListWithdrawAddressHandler.ServeHTTP(w, r)
		case UserManServiceListCardProcedure:
			userManServiceListCardHandler.ServeHTTP(w, r)
		case UserManServiceWithdrawInfoProcedure:
			userManServiceWithdrawInfoHandler.ServeHTTP(w, r)
		case UserManServiceAssetBalanceWithTipProcedure:
			userManServiceAssetBalanceWithTipHandler.ServeHTTP(w, r)
		case UserManServiceWithdrawApplyProcedure:
			userManServiceWithdrawApplyHandler.ServeHTTP(w, r)
		case UserManServiceListWithdrawProcedure:
			userManServiceListWithdrawHandler.ServeHTTP(w, r)
		case UserManServiceLeaseMinerProcedure:
			userManServiceLeaseMinerHandler.ServeHTTP(w, r)
		case UserManServiceMinerOrderListProcedure:
			userManServiceMinerOrderListHandler.ServeHTTP(w, r)
		case UserManServiceCMWalletInfoProcedure:
			userManServiceCMWalletInfoHandler.ServeHTTP(w, r)
		case UserManServiceCMTransferOutProcedure:
			userManServiceCMTransferOutHandler.ServeHTTP(w, r)
		case UserManServiceCMTransferInProcedure:
			userManServiceCMTransferInHandler.ServeHTTP(w, r)
		case UserManServiceManChangeListProcedure:
			userManServiceManChangeListHandler.ServeHTTP(w, r)
		case UserManServiceCommissionPoolIndexProcedure:
			userManServiceCommissionPoolIndexHandler.ServeHTTP(w, r)
		case UserManServiceCommissionChangeListProcedure:
			userManServiceCommissionChangeListHandler.ServeHTTP(w, r)
		case UserManServiceCommissionCollectProcedure:
			userManServiceCommissionCollectHandler.ServeHTTP(w, r)
		case UserManServiceLecturerListProcedure:
			userManServiceLecturerListHandler.ServeHTTP(w, r)
		case UserManServiceManagementOrderListProcedure:
			userManServiceManagementOrderListHandler.ServeHTTP(w, r)
		case UserManServiceBuyManProcedure:
			userManServiceBuyManHandler.ServeHTTP(w, r)
		case UserManServiceBuyContractProcedure:
			userManServiceBuyContractHandler.ServeHTTP(w, r)
		case UserManServiceTradeContractOrderListProcedure:
			userManServiceTradeContractOrderListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserManServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserManServiceHandler struct{}

func (UnimplementedUserManServiceHandler) UpdatePwd(context.Context, *connect.Request[mproto.UpdatePwdRequest]) (*connect.Response[mproto.UpdatePwdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.UpdatePwd is not implemented"))
}

func (UnimplementedUserManServiceHandler) InitVerifyFace(context.Context, *connect.Request[mproto.InitVerifyFaceRequest]) (*connect.Response[httpbody.HttpBody], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.InitVerifyFace is not implemented"))
}

func (UnimplementedUserManServiceHandler) GetVerifyFaceRes(context.Context, *connect.Request[mproto.GetVerifyFaceResRequest]) (*connect.Response[httpbody.HttpBody], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.GetVerifyFaceRes is not implemented"))
}

func (UnimplementedUserManServiceHandler) SaveIdCardInfo(context.Context, *connect.Request[mproto.IdCardInfo]) (*connect.Response[mproto.MsgResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.SaveIdCardInfo is not implemented"))
}

func (UnimplementedUserManServiceHandler) AssetBalanceList(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.AssetBalanceListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.AssetBalanceList is not implemented"))
}

func (UnimplementedUserManServiceHandler) LevelInfo(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.LevelInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.LevelInfo is not implemented"))
}

func (UnimplementedUserManServiceHandler) UserInfoLevel(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.UserInfoLevelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.UserInfoLevel is not implemented"))
}

func (UnimplementedUserManServiceHandler) AddCard(context.Context, *connect.Request[mproto.AddCardRequest]) (*connect.Response[mproto.NullMsg], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.AddCard is not implemented"))
}

func (UnimplementedUserManServiceHandler) AddWithdrawAddress(context.Context, *connect.Request[mproto.AddWithdrawAddressRequest]) (*connect.Response[mproto.MsgResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.AddWithdrawAddress is not implemented"))
}

func (UnimplementedUserManServiceHandler) QuickPayMethodList(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.QuickPayMethodListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.QuickPayMethodList is not implemented"))
}

func (UnimplementedUserManServiceHandler) RechargeList(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.RechargeListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.RechargeList is not implemented"))
}

func (UnimplementedUserManServiceHandler) SubmitRecharge(context.Context, *connect.Request[mproto.SubmitRechargeRequest]) (*connect.Response[mproto.SubmitRechargeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.SubmitRecharge is not implemented"))
}

func (UnimplementedUserManServiceHandler) ListWithdrawAddress(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.ListWithdrawAddressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.ListWithdrawAddress is not implemented"))
}

func (UnimplementedUserManServiceHandler) ListCard(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.ListCardtResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.ListCard is not implemented"))
}

func (UnimplementedUserManServiceHandler) WithdrawInfo(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.WithdrawInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.WithdrawInfo is not implemented"))
}

func (UnimplementedUserManServiceHandler) AssetBalanceWithTip(context.Context, *connect.Request[mproto.IdParam]) (*connect.Response[mproto.AssetBalanceWithTipResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.AssetBalanceWithTip is not implemented"))
}

func (UnimplementedUserManServiceHandler) WithdrawApply(context.Context, *connect.Request[mproto.WithdrawApplyRquest]) (*connect.Response[mproto.MsgResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.WithdrawApply is not implemented"))
}

func (UnimplementedUserManServiceHandler) ListWithdraw(context.Context, *connect.Request[mproto.StringParam]) (*connect.Response[mproto.ListWithdrawResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.ListWithdraw is not implemented"))
}

func (UnimplementedUserManServiceHandler) LeaseMiner(context.Context, *connect.Request[mproto.LeaseMinerRequest]) (*connect.Response[mproto.MsgResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.LeaseMiner is not implemented"))
}

func (UnimplementedUserManServiceHandler) MinerOrderList(context.Context, *connect.Request[mproto.MinerOrderListRequest]) (*connect.Response[mproto.MinerOrderListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.MinerOrderList is not implemented"))
}

func (UnimplementedUserManServiceHandler) CMWalletInfo(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.WalletBalance], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.CMWalletInfo is not implemented"))
}

func (UnimplementedUserManServiceHandler) CMTransferOut(context.Context, *connect.Request[mproto.TransferRequest]) (*connect.Response[mproto.MsgResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.CMTransferOut is not implemented"))
}

func (UnimplementedUserManServiceHandler) CMTransferIn(context.Context, *connect.Request[mproto.TransferRequest]) (*connect.Response[mproto.MsgResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.CMTransferIn is not implemented"))
}

func (UnimplementedUserManServiceHandler) ManChangeList(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.ManChangeListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.ManChangeList is not implemented"))
}

func (UnimplementedUserManServiceHandler) CommissionPoolIndex(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.CommissionPoolIndexResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.CommissionPoolIndex is not implemented"))
}

func (UnimplementedUserManServiceHandler) CommissionChangeList(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.CommissionChangeListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.CommissionChangeList is not implemented"))
}

func (UnimplementedUserManServiceHandler) CommissionCollect(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.MsgResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.CommissionCollect is not implemented"))
}

func (UnimplementedUserManServiceHandler) LecturerList(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.LecturerListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.LecturerList is not implemented"))
}

func (UnimplementedUserManServiceHandler) ManagementOrderList(context.Context, *connect.Request[mproto.NullMsg]) (*connect.Response[mproto.ManagementOrderListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.ManagementOrderList is not implemented"))
}

func (UnimplementedUserManServiceHandler) BuyMan(context.Context, *connect.Request[mproto.BuyManRequest]) (*connect.Response[mproto.MsgResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.BuyMan is not implemented"))
}

func (UnimplementedUserManServiceHandler) BuyContract(context.Context, *connect.Request[mproto.BuyContractRequest]) (*connect.Response[mproto.MsgResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.BuyContract is not implemented"))
}

func (UnimplementedUserManServiceHandler) TradeContractOrderList(context.Context, *connect.Request[mproto.IdParam]) (*connect.Response[mproto.TradeContractOrderListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mproto.UserManService.TradeContractOrderList is not implemented"))
}
