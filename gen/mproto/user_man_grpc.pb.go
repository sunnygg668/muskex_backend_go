// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: mproto/user_man.proto

package mproto

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserManService_UpdatePwd_FullMethodName              = "/mproto.UserManService/UpdatePwd"
	UserManService_InitVerifyFace_FullMethodName         = "/mproto.UserManService/InitVerifyFace"
	UserManService_GetVerifyFaceRes_FullMethodName       = "/mproto.UserManService/GetVerifyFaceRes"
	UserManService_SaveIdCardInfo_FullMethodName         = "/mproto.UserManService/SaveIdCardInfo"
	UserManService_AssetBalanceList_FullMethodName       = "/mproto.UserManService/AssetBalanceList"
	UserManService_LevelInfo_FullMethodName              = "/mproto.UserManService/LevelInfo"
	UserManService_UserInfoLevel_FullMethodName          = "/mproto.UserManService/UserInfoLevel"
	UserManService_AddCard_FullMethodName                = "/mproto.UserManService/AddCard"
	UserManService_AddWithdrawAddress_FullMethodName     = "/mproto.UserManService/AddWithdrawAddress"
	UserManService_QuickPayMethodList_FullMethodName     = "/mproto.UserManService/QuickPayMethodList"
	UserManService_RechargeList_FullMethodName           = "/mproto.UserManService/RechargeList"
	UserManService_SubmitRecharge_FullMethodName         = "/mproto.UserManService/SubmitRecharge"
	UserManService_ListWithdrawAddress_FullMethodName    = "/mproto.UserManService/ListWithdrawAddress"
	UserManService_ListCard_FullMethodName               = "/mproto.UserManService/ListCard"
	UserManService_WithdrawInfo_FullMethodName           = "/mproto.UserManService/WithdrawInfo"
	UserManService_AssetBalanceWithTip_FullMethodName    = "/mproto.UserManService/AssetBalanceWithTip"
	UserManService_WithdrawApply_FullMethodName          = "/mproto.UserManService/WithdrawApply"
	UserManService_ListWithdraw_FullMethodName           = "/mproto.UserManService/ListWithdraw"
	UserManService_LeaseMiner_FullMethodName             = "/mproto.UserManService/LeaseMiner"
	UserManService_MinerOrderList_FullMethodName         = "/mproto.UserManService/MinerOrderList"
	UserManService_CMWalletInfo_FullMethodName           = "/mproto.UserManService/CMWalletInfo"
	UserManService_CMTransferOut_FullMethodName          = "/mproto.UserManService/CMTransferOut"
	UserManService_CMTransferIn_FullMethodName           = "/mproto.UserManService/CMTransferIn"
	UserManService_ManChangeList_FullMethodName          = "/mproto.UserManService/ManChangeList"
	UserManService_CommissionPoolIndex_FullMethodName    = "/mproto.UserManService/CommissionPoolIndex"
	UserManService_CommissionChangeList_FullMethodName   = "/mproto.UserManService/CommissionChangeList"
	UserManService_CommissionCollect_FullMethodName      = "/mproto.UserManService/CommissionCollect"
	UserManService_LecturerList_FullMethodName           = "/mproto.UserManService/LecturerList"
	UserManService_ManagementOrderList_FullMethodName    = "/mproto.UserManService/ManagementOrderList"
	UserManService_BuyMan_FullMethodName                 = "/mproto.UserManService/BuyMan"
	UserManService_BuyContract_FullMethodName            = "/mproto.UserManService/BuyContract"
	UserManService_TradeContractOrderList_FullMethodName = "/mproto.UserManService/TradeContractOrderList"
)

// UserManServiceClient is the client API for UserManService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserManServiceClient interface {
	// 修改密码
	UpdatePwd(ctx context.Context, in *UpdatePwdRequest, opts ...grpc.CallOption) (*UpdatePwdResponse, error)
	// 实名人脸认证初始化： 对应源api realNameAuthentication：响应内容为aliyun的原始结果，需要在测试中确定失败和成功的返回内容。
	InitVerifyFace(ctx context.Context, in *InitVerifyFaceRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// 实名人脸认证结果： 对应源api realNameAuthentication后的results。 响应内容为aliyun的原始结果,需要在测试中确定失败和成功的返回内容。
	GetVerifyFaceRes(ctx context.Context, in *GetVerifyFaceResRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// 保存实名认证身份证信息
	SaveIdCardInfo(ctx context.Context, in *IdCardInfo, opts ...grpc.CallOption) (*MsgResponse, error)
	// /源api /api/user_assets/assetsInfo
	AssetBalanceList(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*AssetBalanceListResponse, error)
	// 源api /api/index/levelInfo
	LevelInfo(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*LevelInfoResponse, error)
	// 用户等及信息，对应旧项目的 /api/user/userInfo
	UserInfoLevel(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*UserInfoLevelResponse, error)
	// 添加addcard 对应旧项目的 /api/financial_card/add
	AddCard(ctx context.Context, in *AddCardRequest, opts ...grpc.CallOption) (*NullMsg, error)
	// 源api/api/address/add
	AddWithdrawAddress(ctx context.Context, in *AddWithdrawAddressRequest, opts ...grpc.CallOption) (*MsgResponse, error)
	// 源api api/financial_recharge/methodList
	QuickPayMethodList(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*QuickPayMethodListResponse, error)
	// 源api api/financial_recharge/rechargeList
	RechargeList(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*RechargeListResponse, error)
	// 快捷充值提交 源api  api/financial_recharge/submitRecharge
	SubmitRecharge(ctx context.Context, in *SubmitRechargeRequest, opts ...grpc.CallOption) (*SubmitRechargeResponse, error)
	// 提现地址列表 源api/api/address/index  ba_financial_address
	ListWithdrawAddress(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*ListWithdrawAddressResponse, error)
	// 银行卡列表  源api /api/financial_card/list
	ListCard(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*ListCardtResponse, error)
	// 提现相关配制信息接口：  汇率 tip...  源api /api/withdraw/info
	WithdrawInfo(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*WithdrawInfoResponse, error)
	// 参数 coin_id： usdt的id 为1 ，默认为1.
	AssetBalanceWithTip(ctx context.Context, in *IdParam, opts ...grpc.CallOption) (*AssetBalanceWithTipResponse, error)
	// 提现申请 源api /api/withdraw/apply
	WithdrawApply(ctx context.Context, in *WithdrawApplyRquest, opts ...grpc.CallOption) (*MsgResponse, error)
	// 提现列表: str参数提交 “0” 或 “1”： /api/withdraw/list
	// 对于 加密记录目前只有USDT,前端写死使USDT即可
	ListWithdraw(ctx context.Context, in *StringParam, opts ...grpc.CallOption) (*ListWithdrawResponse, error)
	// 租赁矿机
	LeaseMiner(ctx context.Context, in *LeaseMinerRequest, opts ...grpc.CallOption) (*MsgResponse, error)
	// 矿机定单列表 源ip /api/miners_order/list
	MinerOrderList(ctx context.Context, in *MinerOrderListRequest, opts ...grpc.CallOption) (*MinerOrderListResponse, error)
	// 理财钱包余额信息api 源api: /api/user/walletInfo
	CMWalletInfo(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*WalletBalance, error)
	// 理财钱转出api  源api: /api/coin_management/transferOut
	CMTransferOut(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*MsgResponse, error)
	// 理财钱包转入api  源api: /api/coin_management/transferIn
	CMTransferIn(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*MsgResponse, error)
	// 余额宝记录   源api: /api/coin_change/managementIncomeList
	ManChangeList(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*ManChangeListResponse, error)
	// 佣金池首页 源api: api/commission_pool/index
	CommissionPoolIndex(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*CommissionPoolIndexResponse, error)
	// 佣金池记录 源api: api/commission_pool/changeList
	CommissionChangeList(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*CommissionChangeListResponse, error)
	// api/commission_pool/collect
	CommissionCollect(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*MsgResponse, error)
	// 导师社区列表 源api:api/lecturer/index
	LecturerList(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*LecturerListResponse, error)
	// 理财定单列表
	ManagementOrderList(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*ManagementOrderListResponse, error)
	// 购买理财 源api:/api/coin_management/buy
	BuyMan(ctx context.Context, in *BuyManRequest, opts ...grpc.CallOption) (*MsgResponse, error)
	// 购买合约  源api:api/contract_order/buy
	BuyContract(ctx context.Context, in *BuyContractRequest, opts ...grpc.CallOption) (*MsgResponse, error)
	// 合约定单列表  源api: api/contract_order/list ;仅一个参数id，做为status使用
	TradeContractOrderList(ctx context.Context, in *IdParam, opts ...grpc.CallOption) (*TradeContractOrderListResponse, error)
}

type userManServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserManServiceClient(cc grpc.ClientConnInterface) UserManServiceClient {
	return &userManServiceClient{cc}
}

func (c *userManServiceClient) UpdatePwd(ctx context.Context, in *UpdatePwdRequest, opts ...grpc.CallOption) (*UpdatePwdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePwdResponse)
	err := c.cc.Invoke(ctx, UserManService_UpdatePwd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManServiceClient) InitVerifyFace(ctx context.Context, in *InitVerifyFaceRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, UserManService_InitVerifyFace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManServiceClient) GetVerifyFaceRes(ctx context.Context, in *GetVerifyFaceResRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, UserManService_GetVerifyFaceRes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManServiceClient) SaveIdCardInfo(ctx context.Context, in *IdCardInfo, opts ...grpc.CallOption) (*MsgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgResponse)
	err := c.cc.Invoke(ctx, UserManService_SaveIdCardInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManServiceClient) AssetBalanceList(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*AssetBalanceListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssetBalanceListResponse)
	err := c.cc.Invoke(ctx, UserManService_AssetBalanceList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManServiceClient) LevelInfo(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*LevelInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LevelInfoResponse)
	err := c.cc.Invoke(ctx, UserManService_LevelInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManServiceClient) UserInfoLevel(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*UserInfoLevelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfoLevelResponse)
	err := c.cc.Invoke(ctx, UserManService_UserInfoLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManServiceClient) AddCard(ctx context.Context, in *AddCardRequest, opts ...grpc.CallOption) (*NullMsg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NullMsg)
	err := c.cc.Invoke(ctx, UserManService_AddCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManServiceClient) AddWithdrawAddress(ctx context.Context, in *AddWithdrawAddressRequest, opts ...grpc.CallOption) (*MsgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgResponse)
	err := c.cc.Invoke(ctx, UserManService_AddWithdrawAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManServiceClient) QuickPayMethodList(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*QuickPayMethodListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuickPayMethodListResponse)
	err := c.cc.Invoke(ctx, UserManService_QuickPayMethodList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManServiceClient) RechargeList(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*RechargeListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RechargeListResponse)
	err := c.cc.Invoke(ctx, UserManService_RechargeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManServiceClient) SubmitRecharge(ctx context.Context, in *SubmitRechargeRequest, opts ...grpc.CallOption) (*SubmitRechargeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitRechargeResponse)
	err := c.cc.Invoke(ctx, UserManService_SubmitRecharge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManServiceClient) ListWithdrawAddress(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*ListWithdrawAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWithdrawAddressResponse)
	err := c.cc.Invoke(ctx, UserManService_ListWithdrawAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManServiceClient) ListCard(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*ListCardtResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCardtResponse)
	err := c.cc.Invoke(ctx, UserManService_ListCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManServiceClient) WithdrawInfo(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*WithdrawInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawInfoResponse)
	err := c.cc.Invoke(ctx, UserManService_WithdrawInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManServiceClient) AssetBalanceWithTip(ctx context.Context, in *IdParam, opts ...grpc.CallOption) (*AssetBalanceWithTipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssetBalanceWithTipResponse)
	err := c.cc.Invoke(ctx, UserManService_AssetBalanceWithTip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManServiceClient) WithdrawApply(ctx context.Context, in *WithdrawApplyRquest, opts ...grpc.CallOption) (*MsgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgResponse)
	err := c.cc.Invoke(ctx, UserManService_WithdrawApply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManServiceClient) ListWithdraw(ctx context.Context, in *StringParam, opts ...grpc.CallOption) (*ListWithdrawResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWithdrawResponse)
	err := c.cc.Invoke(ctx, UserManService_ListWithdraw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManServiceClient) LeaseMiner(ctx context.Context, in *LeaseMinerRequest, opts ...grpc.CallOption) (*MsgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgResponse)
	err := c.cc.Invoke(ctx, UserManService_LeaseMiner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManServiceClient) MinerOrderList(ctx context.Context, in *MinerOrderListRequest, opts ...grpc.CallOption) (*MinerOrderListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MinerOrderListResponse)
	err := c.cc.Invoke(ctx, UserManService_MinerOrderList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManServiceClient) CMWalletInfo(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*WalletBalance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WalletBalance)
	err := c.cc.Invoke(ctx, UserManService_CMWalletInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManServiceClient) CMTransferOut(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*MsgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgResponse)
	err := c.cc.Invoke(ctx, UserManService_CMTransferOut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManServiceClient) CMTransferIn(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*MsgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgResponse)
	err := c.cc.Invoke(ctx, UserManService_CMTransferIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManServiceClient) ManChangeList(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*ManChangeListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ManChangeListResponse)
	err := c.cc.Invoke(ctx, UserManService_ManChangeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManServiceClient) CommissionPoolIndex(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*CommissionPoolIndexResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommissionPoolIndexResponse)
	err := c.cc.Invoke(ctx, UserManService_CommissionPoolIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManServiceClient) CommissionChangeList(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*CommissionChangeListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommissionChangeListResponse)
	err := c.cc.Invoke(ctx, UserManService_CommissionChangeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManServiceClient) CommissionCollect(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*MsgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgResponse)
	err := c.cc.Invoke(ctx, UserManService_CommissionCollect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManServiceClient) LecturerList(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*LecturerListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LecturerListResponse)
	err := c.cc.Invoke(ctx, UserManService_LecturerList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManServiceClient) ManagementOrderList(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*ManagementOrderListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ManagementOrderListResponse)
	err := c.cc.Invoke(ctx, UserManService_ManagementOrderList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManServiceClient) BuyMan(ctx context.Context, in *BuyManRequest, opts ...grpc.CallOption) (*MsgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgResponse)
	err := c.cc.Invoke(ctx, UserManService_BuyMan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManServiceClient) BuyContract(ctx context.Context, in *BuyContractRequest, opts ...grpc.CallOption) (*MsgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgResponse)
	err := c.cc.Invoke(ctx, UserManService_BuyContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManServiceClient) TradeContractOrderList(ctx context.Context, in *IdParam, opts ...grpc.CallOption) (*TradeContractOrderListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TradeContractOrderListResponse)
	err := c.cc.Invoke(ctx, UserManService_TradeContractOrderList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserManServiceServer is the server API for UserManService service.
// All implementations must embed UnimplementedUserManServiceServer
// for forward compatibility.
type UserManServiceServer interface {
	// 修改密码
	UpdatePwd(context.Context, *UpdatePwdRequest) (*UpdatePwdResponse, error)
	// 实名人脸认证初始化： 对应源api realNameAuthentication：响应内容为aliyun的原始结果，需要在测试中确定失败和成功的返回内容。
	InitVerifyFace(context.Context, *InitVerifyFaceRequest) (*httpbody.HttpBody, error)
	// 实名人脸认证结果： 对应源api realNameAuthentication后的results。 响应内容为aliyun的原始结果,需要在测试中确定失败和成功的返回内容。
	GetVerifyFaceRes(context.Context, *GetVerifyFaceResRequest) (*httpbody.HttpBody, error)
	// 保存实名认证身份证信息
	SaveIdCardInfo(context.Context, *IdCardInfo) (*MsgResponse, error)
	// /源api /api/user_assets/assetsInfo
	AssetBalanceList(context.Context, *NullMsg) (*AssetBalanceListResponse, error)
	// 源api /api/index/levelInfo
	LevelInfo(context.Context, *NullMsg) (*LevelInfoResponse, error)
	// 用户等及信息，对应旧项目的 /api/user/userInfo
	UserInfoLevel(context.Context, *NullMsg) (*UserInfoLevelResponse, error)
	// 添加addcard 对应旧项目的 /api/financial_card/add
	AddCard(context.Context, *AddCardRequest) (*NullMsg, error)
	// 源api/api/address/add
	AddWithdrawAddress(context.Context, *AddWithdrawAddressRequest) (*MsgResponse, error)
	// 源api api/financial_recharge/methodList
	QuickPayMethodList(context.Context, *NullMsg) (*QuickPayMethodListResponse, error)
	// 源api api/financial_recharge/rechargeList
	RechargeList(context.Context, *NullMsg) (*RechargeListResponse, error)
	// 快捷充值提交 源api  api/financial_recharge/submitRecharge
	SubmitRecharge(context.Context, *SubmitRechargeRequest) (*SubmitRechargeResponse, error)
	// 提现地址列表 源api/api/address/index  ba_financial_address
	ListWithdrawAddress(context.Context, *NullMsg) (*ListWithdrawAddressResponse, error)
	// 银行卡列表  源api /api/financial_card/list
	ListCard(context.Context, *NullMsg) (*ListCardtResponse, error)
	// 提现相关配制信息接口：  汇率 tip...  源api /api/withdraw/info
	WithdrawInfo(context.Context, *NullMsg) (*WithdrawInfoResponse, error)
	// 参数 coin_id： usdt的id 为1 ，默认为1.
	AssetBalanceWithTip(context.Context, *IdParam) (*AssetBalanceWithTipResponse, error)
	// 提现申请 源api /api/withdraw/apply
	WithdrawApply(context.Context, *WithdrawApplyRquest) (*MsgResponse, error)
	// 提现列表: str参数提交 “0” 或 “1”： /api/withdraw/list
	// 对于 加密记录目前只有USDT,前端写死使USDT即可
	ListWithdraw(context.Context, *StringParam) (*ListWithdrawResponse, error)
	// 租赁矿机
	LeaseMiner(context.Context, *LeaseMinerRequest) (*MsgResponse, error)
	// 矿机定单列表 源ip /api/miners_order/list
	MinerOrderList(context.Context, *MinerOrderListRequest) (*MinerOrderListResponse, error)
	// 理财钱包余额信息api 源api: /api/user/walletInfo
	CMWalletInfo(context.Context, *NullMsg) (*WalletBalance, error)
	// 理财钱转出api  源api: /api/coin_management/transferOut
	CMTransferOut(context.Context, *TransferRequest) (*MsgResponse, error)
	// 理财钱包转入api  源api: /api/coin_management/transferIn
	CMTransferIn(context.Context, *TransferRequest) (*MsgResponse, error)
	// 余额宝记录   源api: /api/coin_change/managementIncomeList
	ManChangeList(context.Context, *NullMsg) (*ManChangeListResponse, error)
	// 佣金池首页 源api: api/commission_pool/index
	CommissionPoolIndex(context.Context, *NullMsg) (*CommissionPoolIndexResponse, error)
	// 佣金池记录 源api: api/commission_pool/changeList
	CommissionChangeList(context.Context, *NullMsg) (*CommissionChangeListResponse, error)
	// api/commission_pool/collect
	CommissionCollect(context.Context, *NullMsg) (*MsgResponse, error)
	// 导师社区列表 源api:api/lecturer/index
	LecturerList(context.Context, *NullMsg) (*LecturerListResponse, error)
	// 理财定单列表
	ManagementOrderList(context.Context, *NullMsg) (*ManagementOrderListResponse, error)
	// 购买理财 源api:/api/coin_management/buy
	BuyMan(context.Context, *BuyManRequest) (*MsgResponse, error)
	// 购买合约  源api:api/contract_order/buy
	BuyContract(context.Context, *BuyContractRequest) (*MsgResponse, error)
	// 合约定单列表  源api: api/contract_order/list ;仅一个参数id，做为status使用
	TradeContractOrderList(context.Context, *IdParam) (*TradeContractOrderListResponse, error)
	mustEmbedUnimplementedUserManServiceServer()
}

// UnimplementedUserManServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserManServiceServer struct{}

func (UnimplementedUserManServiceServer) UpdatePwd(context.Context, *UpdatePwdRequest) (*UpdatePwdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePwd not implemented")
}
func (UnimplementedUserManServiceServer) InitVerifyFace(context.Context, *InitVerifyFaceRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitVerifyFace not implemented")
}
func (UnimplementedUserManServiceServer) GetVerifyFaceRes(context.Context, *GetVerifyFaceResRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVerifyFaceRes not implemented")
}
func (UnimplementedUserManServiceServer) SaveIdCardInfo(context.Context, *IdCardInfo) (*MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveIdCardInfo not implemented")
}
func (UnimplementedUserManServiceServer) AssetBalanceList(context.Context, *NullMsg) (*AssetBalanceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetBalanceList not implemented")
}
func (UnimplementedUserManServiceServer) LevelInfo(context.Context, *NullMsg) (*LevelInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LevelInfo not implemented")
}
func (UnimplementedUserManServiceServer) UserInfoLevel(context.Context, *NullMsg) (*UserInfoLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfoLevel not implemented")
}
func (UnimplementedUserManServiceServer) AddCard(context.Context, *AddCardRequest) (*NullMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCard not implemented")
}
func (UnimplementedUserManServiceServer) AddWithdrawAddress(context.Context, *AddWithdrawAddressRequest) (*MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWithdrawAddress not implemented")
}
func (UnimplementedUserManServiceServer) QuickPayMethodList(context.Context, *NullMsg) (*QuickPayMethodListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuickPayMethodList not implemented")
}
func (UnimplementedUserManServiceServer) RechargeList(context.Context, *NullMsg) (*RechargeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RechargeList not implemented")
}
func (UnimplementedUserManServiceServer) SubmitRecharge(context.Context, *SubmitRechargeRequest) (*SubmitRechargeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitRecharge not implemented")
}
func (UnimplementedUserManServiceServer) ListWithdrawAddress(context.Context, *NullMsg) (*ListWithdrawAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWithdrawAddress not implemented")
}
func (UnimplementedUserManServiceServer) ListCard(context.Context, *NullMsg) (*ListCardtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCard not implemented")
}
func (UnimplementedUserManServiceServer) WithdrawInfo(context.Context, *NullMsg) (*WithdrawInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawInfo not implemented")
}
func (UnimplementedUserManServiceServer) AssetBalanceWithTip(context.Context, *IdParam) (*AssetBalanceWithTipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetBalanceWithTip not implemented")
}
func (UnimplementedUserManServiceServer) WithdrawApply(context.Context, *WithdrawApplyRquest) (*MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawApply not implemented")
}
func (UnimplementedUserManServiceServer) ListWithdraw(context.Context, *StringParam) (*ListWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWithdraw not implemented")
}
func (UnimplementedUserManServiceServer) LeaseMiner(context.Context, *LeaseMinerRequest) (*MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaseMiner not implemented")
}
func (UnimplementedUserManServiceServer) MinerOrderList(context.Context, *MinerOrderListRequest) (*MinerOrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinerOrderList not implemented")
}
func (UnimplementedUserManServiceServer) CMWalletInfo(context.Context, *NullMsg) (*WalletBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMWalletInfo not implemented")
}
func (UnimplementedUserManServiceServer) CMTransferOut(context.Context, *TransferRequest) (*MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMTransferOut not implemented")
}
func (UnimplementedUserManServiceServer) CMTransferIn(context.Context, *TransferRequest) (*MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMTransferIn not implemented")
}
func (UnimplementedUserManServiceServer) ManChangeList(context.Context, *NullMsg) (*ManChangeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManChangeList not implemented")
}
func (UnimplementedUserManServiceServer) CommissionPoolIndex(context.Context, *NullMsg) (*CommissionPoolIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommissionPoolIndex not implemented")
}
func (UnimplementedUserManServiceServer) CommissionChangeList(context.Context, *NullMsg) (*CommissionChangeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommissionChangeList not implemented")
}
func (UnimplementedUserManServiceServer) CommissionCollect(context.Context, *NullMsg) (*MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommissionCollect not implemented")
}
func (UnimplementedUserManServiceServer) LecturerList(context.Context, *NullMsg) (*LecturerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LecturerList not implemented")
}
func (UnimplementedUserManServiceServer) ManagementOrderList(context.Context, *NullMsg) (*ManagementOrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManagementOrderList not implemented")
}
func (UnimplementedUserManServiceServer) BuyMan(context.Context, *BuyManRequest) (*MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyMan not implemented")
}
func (UnimplementedUserManServiceServer) BuyContract(context.Context, *BuyContractRequest) (*MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyContract not implemented")
}
func (UnimplementedUserManServiceServer) TradeContractOrderList(context.Context, *IdParam) (*TradeContractOrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeContractOrderList not implemented")
}
func (UnimplementedUserManServiceServer) mustEmbedUnimplementedUserManServiceServer() {}
func (UnimplementedUserManServiceServer) testEmbeddedByValue()                        {}

// UnsafeUserManServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserManServiceServer will
// result in compilation errors.
type UnsafeUserManServiceServer interface {
	mustEmbedUnimplementedUserManServiceServer()
}

func RegisterUserManServiceServer(s grpc.ServiceRegistrar, srv UserManServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserManServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserManService_ServiceDesc, srv)
}

func _UserManService_UpdatePwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePwdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).UpdatePwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_UpdatePwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).UpdatePwd(ctx, req.(*UpdatePwdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManService_InitVerifyFace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitVerifyFaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).InitVerifyFace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_InitVerifyFace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).InitVerifyFace(ctx, req.(*InitVerifyFaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManService_GetVerifyFaceRes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVerifyFaceResRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).GetVerifyFaceRes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_GetVerifyFaceRes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).GetVerifyFaceRes(ctx, req.(*GetVerifyFaceResRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManService_SaveIdCardInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdCardInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).SaveIdCardInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_SaveIdCardInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).SaveIdCardInfo(ctx, req.(*IdCardInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManService_AssetBalanceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).AssetBalanceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_AssetBalanceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).AssetBalanceList(ctx, req.(*NullMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManService_LevelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).LevelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_LevelInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).LevelInfo(ctx, req.(*NullMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManService_UserInfoLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).UserInfoLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_UserInfoLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).UserInfoLevel(ctx, req.(*NullMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManService_AddCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).AddCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_AddCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).AddCard(ctx, req.(*AddCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManService_AddWithdrawAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWithdrawAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).AddWithdrawAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_AddWithdrawAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).AddWithdrawAddress(ctx, req.(*AddWithdrawAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManService_QuickPayMethodList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).QuickPayMethodList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_QuickPayMethodList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).QuickPayMethodList(ctx, req.(*NullMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManService_RechargeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).RechargeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_RechargeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).RechargeList(ctx, req.(*NullMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManService_SubmitRecharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitRechargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).SubmitRecharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_SubmitRecharge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).SubmitRecharge(ctx, req.(*SubmitRechargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManService_ListWithdrawAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).ListWithdrawAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_ListWithdrawAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).ListWithdrawAddress(ctx, req.(*NullMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManService_ListCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).ListCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_ListCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).ListCard(ctx, req.(*NullMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManService_WithdrawInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).WithdrawInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_WithdrawInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).WithdrawInfo(ctx, req.(*NullMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManService_AssetBalanceWithTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).AssetBalanceWithTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_AssetBalanceWithTip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).AssetBalanceWithTip(ctx, req.(*IdParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManService_WithdrawApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawApplyRquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).WithdrawApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_WithdrawApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).WithdrawApply(ctx, req.(*WithdrawApplyRquest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManService_ListWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).ListWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_ListWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).ListWithdraw(ctx, req.(*StringParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManService_LeaseMiner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaseMinerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).LeaseMiner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_LeaseMiner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).LeaseMiner(ctx, req.(*LeaseMinerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManService_MinerOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinerOrderListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).MinerOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_MinerOrderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).MinerOrderList(ctx, req.(*MinerOrderListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManService_CMWalletInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).CMWalletInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_CMWalletInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).CMWalletInfo(ctx, req.(*NullMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManService_CMTransferOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).CMTransferOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_CMTransferOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).CMTransferOut(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManService_CMTransferIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).CMTransferIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_CMTransferIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).CMTransferIn(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManService_ManChangeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).ManChangeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_ManChangeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).ManChangeList(ctx, req.(*NullMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManService_CommissionPoolIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).CommissionPoolIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_CommissionPoolIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).CommissionPoolIndex(ctx, req.(*NullMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManService_CommissionChangeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).CommissionChangeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_CommissionChangeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).CommissionChangeList(ctx, req.(*NullMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManService_CommissionCollect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).CommissionCollect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_CommissionCollect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).CommissionCollect(ctx, req.(*NullMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManService_LecturerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).LecturerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_LecturerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).LecturerList(ctx, req.(*NullMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManService_ManagementOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).ManagementOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_ManagementOrderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).ManagementOrderList(ctx, req.(*NullMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManService_BuyMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyManRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).BuyMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_BuyMan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).BuyMan(ctx, req.(*BuyManRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManService_BuyContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).BuyContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_BuyContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).BuyContract(ctx, req.(*BuyContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManService_TradeContractOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManServiceServer).TradeContractOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManService_TradeContractOrderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManServiceServer).TradeContractOrderList(ctx, req.(*IdParam))
	}
	return interceptor(ctx, in, info, handler)
}

// UserManService_ServiceDesc is the grpc.ServiceDesc for UserManService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserManService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mproto.UserManService",
	HandlerType: (*UserManServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdatePwd",
			Handler:    _UserManService_UpdatePwd_Handler,
		},
		{
			MethodName: "InitVerifyFace",
			Handler:    _UserManService_InitVerifyFace_Handler,
		},
		{
			MethodName: "GetVerifyFaceRes",
			Handler:    _UserManService_GetVerifyFaceRes_Handler,
		},
		{
			MethodName: "SaveIdCardInfo",
			Handler:    _UserManService_SaveIdCardInfo_Handler,
		},
		{
			MethodName: "AssetBalanceList",
			Handler:    _UserManService_AssetBalanceList_Handler,
		},
		{
			MethodName: "LevelInfo",
			Handler:    _UserManService_LevelInfo_Handler,
		},
		{
			MethodName: "UserInfoLevel",
			Handler:    _UserManService_UserInfoLevel_Handler,
		},
		{
			MethodName: "AddCard",
			Handler:    _UserManService_AddCard_Handler,
		},
		{
			MethodName: "AddWithdrawAddress",
			Handler:    _UserManService_AddWithdrawAddress_Handler,
		},
		{
			MethodName: "QuickPayMethodList",
			Handler:    _UserManService_QuickPayMethodList_Handler,
		},
		{
			MethodName: "RechargeList",
			Handler:    _UserManService_RechargeList_Handler,
		},
		{
			MethodName: "SubmitRecharge",
			Handler:    _UserManService_SubmitRecharge_Handler,
		},
		{
			MethodName: "ListWithdrawAddress",
			Handler:    _UserManService_ListWithdrawAddress_Handler,
		},
		{
			MethodName: "ListCard",
			Handler:    _UserManService_ListCard_Handler,
		},
		{
			MethodName: "WithdrawInfo",
			Handler:    _UserManService_WithdrawInfo_Handler,
		},
		{
			MethodName: "AssetBalanceWithTip",
			Handler:    _UserManService_AssetBalanceWithTip_Handler,
		},
		{
			MethodName: "WithdrawApply",
			Handler:    _UserManService_WithdrawApply_Handler,
		},
		{
			MethodName: "ListWithdraw",
			Handler:    _UserManService_ListWithdraw_Handler,
		},
		{
			MethodName: "LeaseMiner",
			Handler:    _UserManService_LeaseMiner_Handler,
		},
		{
			MethodName: "MinerOrderList",
			Handler:    _UserManService_MinerOrderList_Handler,
		},
		{
			MethodName: "CMWalletInfo",
			Handler:    _UserManService_CMWalletInfo_Handler,
		},
		{
			MethodName: "CMTransferOut",
			Handler:    _UserManService_CMTransferOut_Handler,
		},
		{
			MethodName: "CMTransferIn",
			Handler:    _UserManService_CMTransferIn_Handler,
		},
		{
			MethodName: "ManChangeList",
			Handler:    _UserManService_ManChangeList_Handler,
		},
		{
			MethodName: "CommissionPoolIndex",
			Handler:    _UserManService_CommissionPoolIndex_Handler,
		},
		{
			MethodName: "CommissionChangeList",
			Handler:    _UserManService_CommissionChangeList_Handler,
		},
		{
			MethodName: "CommissionCollect",
			Handler:    _UserManService_CommissionCollect_Handler,
		},
		{
			MethodName: "LecturerList",
			Handler:    _UserManService_LecturerList_Handler,
		},
		{
			MethodName: "ManagementOrderList",
			Handler:    _UserManService_ManagementOrderList_Handler,
		},
		{
			MethodName: "BuyMan",
			Handler:    _UserManService_BuyMan_Handler,
		},
		{
			MethodName: "BuyContract",
			Handler:    _UserManService_BuyContract_Handler,
		},
		{
			MethodName: "TradeContractOrderList",
			Handler:    _UserManService_TradeContractOrderList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mproto/user_man.proto",
}
