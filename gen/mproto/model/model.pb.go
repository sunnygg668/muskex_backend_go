// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.2
// source: mproto/model/model.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Group    string `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	Title    string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Tip      string `protobuf:"bytes,5,opt,name=tip,proto3" json:"tip,omitempty"`
	Type     string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Value    string `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
	Content  string `protobuf:"bytes,8,opt,name=content,proto3" json:"content,omitempty"`
	Rule     string `protobuf:"bytes,9,opt,name=rule,proto3" json:"rule,omitempty"`
	Extend   string `protobuf:"bytes,10,opt,name=extend,proto3" json:"extend,omitempty"`
	AllowDel uint64 `protobuf:"varint,11,opt,name=allow_del,json=allowDel,proto3" json:"allow_del,omitempty"`
	Weigh    int64  `protobuf:"varint,12,opt,name=weigh,proto3" json:"weigh,omitempty"`
	// 签名校验
	Sign string `protobuf:"bytes,13,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Config) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Config) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *Config) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Config) GetTip() string {
	if x != nil {
		return x.Tip
	}
	return ""
}

func (x *Config) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Config) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Config) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Config) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *Config) GetExtend() string {
	if x != nil {
		return x.Extend
	}
	return ""
}

func (x *Config) GetAllowDel() uint64 {
	if x != nil {
		return x.AllowDel
	}
	return 0
}

func (x *Config) GetWeigh() int64 {
	if x != nil {
		return x.Weigh
	}
	return 0
}

func (x *Config) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type Coin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Alias              string  `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
	LogoImage          string  `protobuf:"bytes,4,opt,name=logo_image,json=logoImage,proto3" json:"logo_image,omitempty"`
	KlineType          string  `protobuf:"bytes,5,opt,name=kline_type,json=klineType,proto3" json:"kline_type,omitempty"`
	Margin             float64 `protobuf:"fixed64,6,opt,name=margin,proto3" json:"margin,omitempty"`
	InitialPrice       float64 `protobuf:"fixed64,7,opt,name=initial_price,json=initialPrice,proto3" json:"initial_price,omitempty"`
	CurPrice           int64   `protobuf:"varint,8,opt,name=cur_price,json=curPrice,proto3" json:"cur_price,omitempty"`
	TransferRate       float64 `protobuf:"fixed64,9,opt,name=transfer_rate,json=transferRate,proto3" json:"transfer_rate,omitempty"`
	TransferMinNum     float64 `protobuf:"fixed64,10,opt,name=transfer_min_num,json=transferMinNum,proto3" json:"transfer_min_num,omitempty"`
	AllowTransfer      uint64  `protobuf:"varint,11,opt,name=allow_transfer,json=allowTransfer,proto3" json:"allow_transfer,omitempty"`
	AllowRecharge      uint64  `protobuf:"varint,12,opt,name=allow_recharge,json=allowRecharge,proto3" json:"allow_recharge,omitempty"`
	HomeRecommend      uint64  `protobuf:"varint,13,opt,name=home_recommend,json=homeRecommend,proto3" json:"home_recommend,omitempty"`
	Weigh              int64   `protobuf:"varint,14,opt,name=weigh,proto3" json:"weigh,omitempty"`
	CreateTime         uint64  `protobuf:"varint,15,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime         uint64  `protobuf:"varint,16,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Status             uint64  `protobuf:"varint,17,opt,name=status,proto3" json:"status,omitempty"`
	EventTime          uint64  `protobuf:"varint,18,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	PriceChangePercent float32 `protobuf:"fixed32,19,opt,name=price_change_percent,json=priceChangePercent,proto3" json:"price_change_percent,omitempty"`
	TotalTrade         float64 `protobuf:"fixed64,20,opt,name=total_trade,json=totalTrade,proto3" json:"total_trade,omitempty"`
}

func (x *Coin) Reset() {
	*x = Coin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coin) ProtoMessage() {}

func (x *Coin) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coin.ProtoReflect.Descriptor instead.
func (*Coin) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{1}
}

func (x *Coin) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Coin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Coin) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Coin) GetLogoImage() string {
	if x != nil {
		return x.LogoImage
	}
	return ""
}

func (x *Coin) GetKlineType() string {
	if x != nil {
		return x.KlineType
	}
	return ""
}

func (x *Coin) GetMargin() float64 {
	if x != nil {
		return x.Margin
	}
	return 0
}

func (x *Coin) GetInitialPrice() float64 {
	if x != nil {
		return x.InitialPrice
	}
	return 0
}

func (x *Coin) GetCurPrice() int64 {
	if x != nil {
		return x.CurPrice
	}
	return 0
}

func (x *Coin) GetTransferRate() float64 {
	if x != nil {
		return x.TransferRate
	}
	return 0
}

func (x *Coin) GetTransferMinNum() float64 {
	if x != nil {
		return x.TransferMinNum
	}
	return 0
}

func (x *Coin) GetAllowTransfer() uint64 {
	if x != nil {
		return x.AllowTransfer
	}
	return 0
}

func (x *Coin) GetAllowRecharge() uint64 {
	if x != nil {
		return x.AllowRecharge
	}
	return 0
}

func (x *Coin) GetHomeRecommend() uint64 {
	if x != nil {
		return x.HomeRecommend
	}
	return 0
}

func (x *Coin) GetWeigh() int64 {
	if x != nil {
		return x.Weigh
	}
	return 0
}

func (x *Coin) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Coin) GetUpdateTime() uint64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *Coin) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Coin) GetEventTime() uint64 {
	if x != nil {
		return x.EventTime
	}
	return 0
}

func (x *Coin) GetPriceChangePercent() float32 {
	if x != nil {
		return x.PriceChangePercent
	}
	return 0
}

func (x *Coin) GetTotalTrade() float64 {
	if x != nil {
		return x.TotalTrade
	}
	return 0
}

type MarketNews struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	CoverImage  string `protobuf:"bytes,3,opt,name=cover_image,json=coverImage,proto3" json:"cover_image,omitempty"`
	Content     string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Status      uint64 `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	ReleaseTime uint64 `protobuf:"varint,6,opt,name=release_time,json=releaseTime,proto3" json:"release_time,omitempty"`
	CreateTime  uint64 `protobuf:"varint,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime  uint64 `protobuf:"varint,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *MarketNews) Reset() {
	*x = MarketNews{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketNews) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketNews) ProtoMessage() {}

func (x *MarketNews) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketNews.ProtoReflect.Descriptor instead.
func (*MarketNews) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{2}
}

func (x *MarketNews) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MarketNews) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MarketNews) GetCoverImage() string {
	if x != nil {
		return x.CoverImage
	}
	return ""
}

func (x *MarketNews) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *MarketNews) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MarketNews) GetReleaseTime() uint64 {
	if x != nil {
		return x.ReleaseTime
	}
	return 0
}

func (x *MarketNews) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *MarketNews) GetUpdateTime() uint64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type MarketNotice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content     string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Url         string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	IsTop       uint64 `protobuf:"varint,5,opt,name=is_top,json=isTop,proto3" json:"is_top,omitempty"`
	IsDialog    uint64 `protobuf:"varint,6,opt,name=is_dialog,json=isDialog,proto3" json:"is_dialog,omitempty"`
	ReleaseTime uint64 `protobuf:"varint,7,opt,name=release_time,json=releaseTime,proto3" json:"release_time,omitempty"`
	CreateTime  uint64 `protobuf:"varint,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime  uint64 `protobuf:"varint,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *MarketNotice) Reset() {
	*x = MarketNotice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketNotice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketNotice) ProtoMessage() {}

func (x *MarketNotice) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketNotice.ProtoReflect.Descriptor instead.
func (*MarketNotice) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{3}
}

func (x *MarketNotice) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MarketNotice) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MarketNotice) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *MarketNotice) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MarketNotice) GetIsTop() uint64 {
	if x != nil {
		return x.IsTop
	}
	return 0
}

func (x *MarketNotice) GetIsDialog() uint64 {
	if x != nil {
		return x.IsDialog
	}
	return 0
}

func (x *MarketNotice) GetReleaseTime() uint64 {
	if x != nil {
		return x.ReleaseTime
	}
	return 0
}

func (x *MarketNotice) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *MarketNotice) GetUpdateTime() uint64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GroupId       int64   `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	WalletAddr    string  `protobuf:"bytes,3,opt,name=wallet_addr,json=walletAddr,proto3" json:"wallet_addr,omitempty"` // 钱包地址
	Pingtai       string  `protobuf:"bytes,4,opt,name=pingtai,proto3" json:"pingtai,omitempty"`                         // 平台
	Username      string  `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	Nickname      string  `protobuf:"bytes,6,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Email         string  `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	Mobile        string  `protobuf:"bytes,8,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Avatar        string  `protobuf:"bytes,9,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Gender        int64   `protobuf:"varint,10,opt,name=gender,proto3" json:"gender,omitempty"`
	Birthday      string  `protobuf:"bytes,11,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Money         float64 `protobuf:"fixed64,12,opt,name=money,proto3" json:"money,omitempty"`
	Score         int64   `protobuf:"varint,13,opt,name=score,proto3" json:"score,omitempty"`
	LastLoginTime int64   `protobuf:"varint,14,opt,name=last_login_time,json=lastLoginTime,proto3" json:"last_login_time,omitempty"`
	LastLoginIp   string  `protobuf:"bytes,15,opt,name=last_login_ip,json=lastLoginIp,proto3" json:"last_login_ip,omitempty"`
	LoginFailure  int64   `protobuf:"varint,16,opt,name=login_failure,json=loginFailure,proto3" json:"login_failure,omitempty"`
	JoinIp        string  `protobuf:"bytes,17,opt,name=join_ip,json=joinIp,proto3" json:"join_ip,omitempty"`
	JoinTime      int64   `protobuf:"varint,18,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"`
	Motto         string  `protobuf:"bytes,19,opt,name=motto,proto3" json:"motto,omitempty"`
	Password      string  `protobuf:"bytes,20,opt,name=password,proto3" json:"password,omitempty"`
	Salt          string  `protobuf:"bytes,21,opt,name=salt,proto3" json:"salt,omitempty"`
	FundPassword  string  `protobuf:"bytes,22,opt,name=fund_password,json=fundPassword,proto3" json:"fund_password,omitempty"`
	FundSalt      string  `protobuf:"bytes,23,opt,name=fund_salt,json=fundSalt,proto3" json:"fund_salt,omitempty"`
	Status        string  `protobuf:"bytes,24,opt,name=status,proto3" json:"status,omitempty"`
	// @gotags: gorm:"autoUpdateTime"
	UpdateTime int64 `protobuf:"varint,25,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// @gotags: gorm:"autoCreateTime"
	CreateTime        int64                `protobuf:"varint,26,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	Refereeid         int64                `protobuf:"varint,27,opt,name=refereeid,proto3" json:"refereeid,omitempty"`
	Invitationcode    string               `protobuf:"bytes,28,opt,name=invitationcode,proto3" json:"invitationcode,omitempty"`
	Name              string               `protobuf:"bytes,29,opt,name=name,proto3" json:"name,omitempty"`
	Idcard            string               `protobuf:"bytes,30,opt,name=idcard,proto3" json:"idcard,omitempty"`
	CertifyId         string               `protobuf:"bytes,31,opt,name=certify_id,json=certifyId,proto3" json:"certify_id,omitempty"`        // 实人认证唯一标识
	IsCertified       int64                `protobuf:"varint,32,opt,name=is_certified,json=isCertified,proto3" json:"is_certified,omitempty"` // 是否实名：1 未实名 2 已实名 3 认证失败
	IsCanWithdraw     int64                `protobuf:"varint,33,opt,name=is_can_withdraw,json=isCanWithdraw,proto3" json:"is_can_withdraw,omitempty"`
	IsTeamLeader      int64                `protobuf:"varint,34,opt,name=is_team_leader,json=isTeamLeader,proto3" json:"is_team_leader,omitempty"`
	IsWhitelist       int64                `protobuf:"varint,35,opt,name=is_whitelist,json=isWhitelist,proto3" json:"is_whitelist,omitempty"`
	IsActivation      int64                `protobuf:"varint,36,opt,name=is_activation,json=isActivation,proto3" json:"is_activation,omitempty"`
	ActivationTime    int64                `protobuf:"varint,37,opt,name=activation_time,json=activationTime,proto3" json:"activation_time,omitempty"`
	ActiveTimes       int64                `protobuf:"varint,50,opt,name=active_times,json=activeTimes,proto3" json:"active_times,omitempty"`
	LimitWithdrawTime int64                `protobuf:"varint,38,opt,name=limit_withdraw_time,json=limitWithdrawTime,proto3" json:"limit_withdraw_time,omitempty"`
	TeamFlag          string               `protobuf:"bytes,39,opt,name=team_flag,json=teamFlag,proto3" json:"team_flag,omitempty"`
	TeamLeaderId      int64                `protobuf:"varint,40,opt,name=team_leader_id,json=teamLeaderId,proto3" json:"team_leader_id,omitempty"`
	TeamLevel         int64                `protobuf:"varint,41,opt,name=team_level,json=teamLevel,proto3" json:"team_level,omitempty"`
	CommissionPool    float64              `protobuf:"fixed64,42,opt,name=commission_pool,json=commissionPool,proto3" json:"commission_pool,omitempty"`
	Level             int64                `protobuf:"varint,43,opt,name=level,proto3" json:"level,omitempty"`
	RefereeNums       int64                `protobuf:"varint,44,opt,name=referee_nums,json=refereeNums,proto3" json:"referee_nums,omitempty"`
	TeamNums          int64                `protobuf:"varint,45,opt,name=team_nums,json=teamNums,proto3" json:"team_nums,omitempty"`
	LotteryCount      int64                `protobuf:"varint,46,opt,name=lottery_count,json=lotteryCount,proto3" json:"lottery_count,omitempty"`
	CreditScore       int64                `protobuf:"varint,47,opt,name=credit_score,json=creditScore,proto3" json:"credit_score,omitempty"` // 信誉分
	WithdrawAddresses []*FinancialAddress  `protobuf:"bytes,48,rep,name=withdraw_addresses,json=withdrawAddresses,proto3" json:"withdraw_addresses,omitempty"`
	Withdraws         []*FinancialWithdraw `protobuf:"bytes,49,rep,name=Withdraws,proto3" json:"Withdraws,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{4}
}

func (x *User) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *User) GetWalletAddr() string {
	if x != nil {
		return x.WalletAddr
	}
	return ""
}

func (x *User) GetPingtai() string {
	if x != nil {
		return x.Pingtai
	}
	return ""
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *User) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *User) GetGender() int64 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *User) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *User) GetMoney() float64 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *User) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *User) GetLastLoginTime() int64 {
	if x != nil {
		return x.LastLoginTime
	}
	return 0
}

func (x *User) GetLastLoginIp() string {
	if x != nil {
		return x.LastLoginIp
	}
	return ""
}

func (x *User) GetLoginFailure() int64 {
	if x != nil {
		return x.LoginFailure
	}
	return 0
}

func (x *User) GetJoinIp() string {
	if x != nil {
		return x.JoinIp
	}
	return ""
}

func (x *User) GetJoinTime() int64 {
	if x != nil {
		return x.JoinTime
	}
	return 0
}

func (x *User) GetMotto() string {
	if x != nil {
		return x.Motto
	}
	return ""
}

func (x *User) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *User) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *User) GetFundPassword() string {
	if x != nil {
		return x.FundPassword
	}
	return ""
}

func (x *User) GetFundSalt() string {
	if x != nil {
		return x.FundSalt
	}
	return ""
}

func (x *User) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *User) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *User) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *User) GetRefereeid() int64 {
	if x != nil {
		return x.Refereeid
	}
	return 0
}

func (x *User) GetInvitationcode() string {
	if x != nil {
		return x.Invitationcode
	}
	return ""
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetIdcard() string {
	if x != nil {
		return x.Idcard
	}
	return ""
}

func (x *User) GetCertifyId() string {
	if x != nil {
		return x.CertifyId
	}
	return ""
}

func (x *User) GetIsCertified() int64 {
	if x != nil {
		return x.IsCertified
	}
	return 0
}

func (x *User) GetIsCanWithdraw() int64 {
	if x != nil {
		return x.IsCanWithdraw
	}
	return 0
}

func (x *User) GetIsTeamLeader() int64 {
	if x != nil {
		return x.IsTeamLeader
	}
	return 0
}

func (x *User) GetIsWhitelist() int64 {
	if x != nil {
		return x.IsWhitelist
	}
	return 0
}

func (x *User) GetIsActivation() int64 {
	if x != nil {
		return x.IsActivation
	}
	return 0
}

func (x *User) GetActivationTime() int64 {
	if x != nil {
		return x.ActivationTime
	}
	return 0
}

func (x *User) GetActiveTimes() int64 {
	if x != nil {
		return x.ActiveTimes
	}
	return 0
}

func (x *User) GetLimitWithdrawTime() int64 {
	if x != nil {
		return x.LimitWithdrawTime
	}
	return 0
}

func (x *User) GetTeamFlag() string {
	if x != nil {
		return x.TeamFlag
	}
	return ""
}

func (x *User) GetTeamLeaderId() int64 {
	if x != nil {
		return x.TeamLeaderId
	}
	return 0
}

func (x *User) GetTeamLevel() int64 {
	if x != nil {
		return x.TeamLevel
	}
	return 0
}

func (x *User) GetCommissionPool() float64 {
	if x != nil {
		return x.CommissionPool
	}
	return 0
}

func (x *User) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *User) GetRefereeNums() int64 {
	if x != nil {
		return x.RefereeNums
	}
	return 0
}

func (x *User) GetTeamNums() int64 {
	if x != nil {
		return x.TeamNums
	}
	return 0
}

func (x *User) GetLotteryCount() int64 {
	if x != nil {
		return x.LotteryCount
	}
	return 0
}

func (x *User) GetCreditScore() int64 {
	if x != nil {
		return x.CreditScore
	}
	return 0
}

func (x *User) GetWithdrawAddresses() []*FinancialAddress {
	if x != nil {
		return x.WithdrawAddresses
	}
	return nil
}

func (x *User) GetWithdraws() []*FinancialWithdraw {
	if x != nil {
		return x.Withdraws
	}
	return nil
}

type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token      string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Type       string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	UserId     int64  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CreateTime int64  `protobuf:"varint,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ExpireTime int64  `protobuf:"varint,5,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{5}
}

func (x *Token) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Token) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Token) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Token) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Token) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

type UserLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	LogoImage      string  `protobuf:"bytes,2,opt,name=logo_image,json=logoImage,proto3" json:"logo_image,omitempty"`
	Name           string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Level          uint32  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	RebateLayers   int64   `protobuf:"varint,5,opt,name=rebate_layers,json=rebateLayers,proto3" json:"rebate_layers,omitempty"`
	RefereeNum     uint32  `protobuf:"varint,6,opt,name=referee_num,json=refereeNum,proto3" json:"referee_num,omitempty"`
	TeamNum        uint32  `protobuf:"varint,7,opt,name=team_num,json=teamNum,proto3" json:"team_num,omitempty"`
	MemberLevel    uint32  `protobuf:"varint,8,opt,name=member_level,json=memberLevel,proto3" json:"member_level,omitempty"`
	MemberLevelNum uint32  `protobuf:"varint,9,opt,name=member_level_num,json=memberLevelNum,proto3" json:"member_level_num,omitempty"`
	Bonus          float32 `protobuf:"fixed32,10,opt,name=bonus,proto3" json:"bonus,omitempty"`
	Layer_1Ratio   float32 `protobuf:"fixed32,11,opt,name=layer_1_ratio,json=layer1Ratio,proto3" json:"layer_1_ratio,omitempty"`
	Layer_2Ratio   float32 `protobuf:"fixed32,12,opt,name=layer_2_ratio,json=layer2Ratio,proto3" json:"layer_2_ratio,omitempty"`
	Layer_3Ratio   float32 `protobuf:"fixed32,13,opt,name=layer_3_ratio,json=layer3Ratio,proto3" json:"layer_3_ratio,omitempty"`
	Layer_4Ratio   float32 `protobuf:"fixed32,14,opt,name=layer_4_ratio,json=layer4Ratio,proto3" json:"layer_4_ratio,omitempty"`
	Layer_5Ratio   float32 `protobuf:"fixed32,15,opt,name=layer_5_ratio,json=layer5Ratio,proto3" json:"layer_5_ratio,omitempty"`
	IsOpen         int64   `protobuf:"varint,16,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *UserLevel) Reset() {
	*x = UserLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLevel) ProtoMessage() {}

func (x *UserLevel) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLevel.ProtoReflect.Descriptor instead.
func (*UserLevel) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{6}
}

func (x *UserLevel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserLevel) GetLogoImage() string {
	if x != nil {
		return x.LogoImage
	}
	return ""
}

func (x *UserLevel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserLevel) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *UserLevel) GetRebateLayers() int64 {
	if x != nil {
		return x.RebateLayers
	}
	return 0
}

func (x *UserLevel) GetRefereeNum() uint32 {
	if x != nil {
		return x.RefereeNum
	}
	return 0
}

func (x *UserLevel) GetTeamNum() uint32 {
	if x != nil {
		return x.TeamNum
	}
	return 0
}

func (x *UserLevel) GetMemberLevel() uint32 {
	if x != nil {
		return x.MemberLevel
	}
	return 0
}

func (x *UserLevel) GetMemberLevelNum() uint32 {
	if x != nil {
		return x.MemberLevelNum
	}
	return 0
}

func (x *UserLevel) GetBonus() float32 {
	if x != nil {
		return x.Bonus
	}
	return 0
}

func (x *UserLevel) GetLayer_1Ratio() float32 {
	if x != nil {
		return x.Layer_1Ratio
	}
	return 0
}

func (x *UserLevel) GetLayer_2Ratio() float32 {
	if x != nil {
		return x.Layer_2Ratio
	}
	return 0
}

func (x *UserLevel) GetLayer_3Ratio() float32 {
	if x != nil {
		return x.Layer_3Ratio
	}
	return 0
}

func (x *UserLevel) GetLayer_4Ratio() float32 {
	if x != nil {
		return x.Layer_4Ratio
	}
	return 0
}

func (x *UserLevel) GetLayer_5Ratio() float32 {
	if x != nil {
		return x.Layer_5Ratio
	}
	return 0
}

func (x *UserLevel) GetIsOpen() int64 {
	if x != nil {
		return x.IsOpen
	}
	return 0
}

type TeamUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user_id
	// @gotags:  `gorm:"primarykey"`
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// @gotags:  `gorm:"primarykey"`
	Pid         int64 `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	TeamLevel   int64 `protobuf:"varint,3,opt,name=team_level,json=teamLevel,proto3" json:"team_level,omitempty"`
	IsActive    bool  `protobuf:"varint,4,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	IsWhitelist int64 `protobuf:"varint,5,opt,name=is_whitelist,json=isWhitelist,proto3" json:"is_whitelist,omitempty"`
	UserLevel   int64 `protobuf:"varint,6,opt,name=user_level,json=userLevel,proto3" json:"user_level,omitempty"`
	// @gotags: gorm:"autoUpdateTime"
	UpdateTime int64 `protobuf:"varint,7,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`
}

func (x *TeamUser) Reset() {
	*x = TeamUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamUser) ProtoMessage() {}

func (x *TeamUser) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamUser.ProtoReflect.Descriptor instead.
func (*TeamUser) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{7}
}

func (x *TeamUser) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TeamUser) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *TeamUser) GetTeamLevel() int64 {
	if x != nil {
		return x.TeamLevel
	}
	return 0
}

func (x *TeamUser) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *TeamUser) GetIsWhitelist() int64 {
	if x != nil {
		return x.IsWhitelist
	}
	return 0
}

func (x *TeamUser) GetUserLevel() int64 {
	if x != nil {
		return x.UserLevel
	}
	return 0
}

func (x *TeamUser) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type UserTeamLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// @gotags: gorm:"column:user_level"
	UserLevelId int64  `protobuf:"varint,4,opt,name=user_level_id,json=userLevelId,proto3" json:"user_level_id,omitempty"`
	TeamNums    uint32 `protobuf:"varint,5,opt,name=team_nums,json=teamNums,proto3" json:"team_nums,omitempty"`
	RefereeNums uint32 `protobuf:"varint,6,opt,name=referee_nums,json=refereeNums,proto3" json:"referee_nums,omitempty"`
	// @gotags: gorm:"autoCreateTime"
	CreateTime int64 `protobuf:"varint,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// @gotags: gorm:"autoUpdateTime"
	UpdateTime int64 `protobuf:"varint,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *UserTeamLevel) Reset() {
	*x = UserTeamLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTeamLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTeamLevel) ProtoMessage() {}

func (x *UserTeamLevel) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTeamLevel.ProtoReflect.Descriptor instead.
func (*UserTeamLevel) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{8}
}

func (x *UserTeamLevel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserTeamLevel) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserTeamLevel) GetUserLevelId() int64 {
	if x != nil {
		return x.UserLevelId
	}
	return 0
}

func (x *UserTeamLevel) GetTeamNums() uint32 {
	if x != nil {
		return x.TeamNums
	}
	return 0
}

func (x *UserTeamLevel) GetRefereeNums() uint32 {
	if x != nil {
		return x.RefereeNums
	}
	return 0
}

func (x *UserTeamLevel) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UserTeamLevel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type FinancialCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId          int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FinancialBankId uint32 `protobuf:"varint,3,opt,name=financial_bank_id,json=financialBankId,proto3" json:"financial_bank_id,omitempty"`
	AccountName     string `protobuf:"bytes,4,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	BankNum         string `protobuf:"bytes,5,opt,name=bank_num,json=bankNum,proto3" json:"bank_num,omitempty"`
	Status          string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	// @gotags: gorm:"-"
	StatusText string `protobuf:"bytes,9,opt,name=status_text,json=statusText,proto3" json:"status_text,omitempty"`
	// @gotags: gorm:"autoCreateTime"
	CreateTime int64 `protobuf:"varint,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// @gotags: gorm:"autoUpdateTime"
	UpdateTime int64 `protobuf:"varint,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *FinancialCard) Reset() {
	*x = FinancialCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinancialCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialCard) ProtoMessage() {}

func (x *FinancialCard) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialCard.ProtoReflect.Descriptor instead.
func (*FinancialCard) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{9}
}

func (x *FinancialCard) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FinancialCard) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FinancialCard) GetFinancialBankId() uint32 {
	if x != nil {
		return x.FinancialBankId
	}
	return 0
}

func (x *FinancialCard) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *FinancialCard) GetBankNum() string {
	if x != nil {
		return x.BankNum
	}
	return ""
}

func (x *FinancialCard) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FinancialCard) GetStatusText() string {
	if x != nil {
		return x.StatusText
	}
	return ""
}

func (x *FinancialCard) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *FinancialCard) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type MarketCarousel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Position   string `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	Image      string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Editor     string `protobuf:"bytes,4,opt,name=editor,proto3" json:"editor,omitempty"`
	Url        string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	Weigh      int64  `protobuf:"varint,6,opt,name=weigh,proto3" json:"weigh,omitempty"`
	CreateTime int64  `protobuf:"varint,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime int64  `protobuf:"varint,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Status     int64  `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	CanOpen    int64  `protobuf:"varint,10,opt,name=can_open,json=canOpen,proto3" json:"can_open,omitempty"`
}

func (x *MarketCarousel) Reset() {
	*x = MarketCarousel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketCarousel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketCarousel) ProtoMessage() {}

func (x *MarketCarousel) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketCarousel.ProtoReflect.Descriptor instead.
func (*MarketCarousel) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{10}
}

func (x *MarketCarousel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MarketCarousel) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *MarketCarousel) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *MarketCarousel) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *MarketCarousel) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MarketCarousel) GetWeigh() int64 {
	if x != nil {
		return x.Weigh
	}
	return 0
}

func (x *MarketCarousel) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *MarketCarousel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *MarketCarousel) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MarketCarousel) GetCanOpen() int64 {
	if x != nil {
		return x.CanOpen
	}
	return 0
}

type FinancialBank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ShortName  string `protobuf:"bytes,3,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Logo       string `protobuf:"bytes,4,opt,name=logo,proto3" json:"logo,omitempty"`
	FeeRatio   int64  `protobuf:"varint,5,opt,name=fee_ratio,json=feeRatio,proto3" json:"fee_ratio,omitempty"`
	Status     int64  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime int64  `protobuf:"varint,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime int64  `protobuf:"varint,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *FinancialBank) Reset() {
	*x = FinancialBank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinancialBank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialBank) ProtoMessage() {}

func (x *FinancialBank) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialBank.ProtoReflect.Descriptor instead.
func (*FinancialBank) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{11}
}

func (x *FinancialBank) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FinancialBank) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FinancialBank) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *FinancialBank) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *FinancialBank) GetFeeRatio() int64 {
	if x != nil {
		return x.FeeRatio
	}
	return 0
}

func (x *FinancialBank) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FinancialBank) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *FinancialBank) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type FinancialAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId uint32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Network type: 0 or 1
	Network string `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	Name    string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Default address: 0 or 1
	IsDefault string `protobuf:"bytes,6,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	Status    uint32 `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	// @gotags: gorm:"autoCreateTime"
	CreateTime uint64 `protobuf:"varint,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// @gotags: gorm:"autoUpdateTime"
	UpdateTime uint64 `protobuf:"varint,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *FinancialAddress) Reset() {
	*x = FinancialAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinancialAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialAddress) ProtoMessage() {}

func (x *FinancialAddress) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialAddress.ProtoReflect.Descriptor instead.
func (*FinancialAddress) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{12}
}

func (x *FinancialAddress) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FinancialAddress) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FinancialAddress) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *FinancialAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *FinancialAddress) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FinancialAddress) GetIsDefault() string {
	if x != nil {
		return x.IsDefault
	}
	return ""
}

func (x *FinancialAddress) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FinancialAddress) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *FinancialAddress) GetUpdateTime() uint64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// usdt理财
type CoinManagement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 产品名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 结算币种
	SettlementCoinId int64 `protobuf:"varint,3,opt,name=settlement_coin_id,json=settlementCoinId,proto3" json:"settlement_coin_id,omitempty"`
	// 收益币种
	IncomeCoinId int64 `protobuf:"varint,4,opt,name=income_coin_id,json=incomeCoinId,proto3" json:"income_coin_id,omitempty"`
	// 开始时间
	BeginTime int64 `protobuf:"varint,5,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	// 结束时间
	EndTime int64 `protobuf:"varint,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// 购买价格
	Price float64 `protobuf:"fixed64,7,opt,name=price,proto3" json:"price,omitempty"`
	// 封闭天数
	ClosedDays int64 `protobuf:"varint,8,opt,name=closed_days,json=closedDays,proto3" json:"closed_days,omitempty"`
	// 发行总量
	IssuesNum int64 `protobuf:"varint,9,opt,name=issues_num,json=issuesNum,proto3" json:"issues_num,omitempty"`
	// 已申购量
	SoldNum int64 `protobuf:"varint,10,opt,name=sold_num,json=soldNum,proto3" json:"sold_num,omitempty"`
	// 最低购买
	MinBuyNum int64 `protobuf:"varint,11,opt,name=min_buy_num,json=minBuyNum,proto3" json:"min_buy_num,omitempty"`
	// 最高购买
	MaxBuyNum int64 `protobuf:"varint,12,opt,name=max_buy_num,json=maxBuyNum,proto3" json:"max_buy_num,omitempty"`
	// 收益类型
	IncomeType string `protobuf:"bytes,13,opt,name=income_type,json=incomeType,proto3" json:"income_type,omitempty"`
	// 收益率
	IncomeRatio float64 `protobuf:"fixed64,14,opt,name=income_ratio,json=incomeRatio,proto3" json:"income_ratio,omitempty"`
	// 状态
	Status int64 `protobuf:"varint,15,opt,name=status,proto3" json:"status,omitempty"`
	// 权重
	Weigh int64 `protobuf:"varint,16,opt,name=weigh,proto3" json:"weigh,omitempty"`
	// @gotags: gorm:"autoCreateTime"
	CreateTime int64 `protobuf:"varint,17,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// @gotags: gorm:"autoUpdateTime"
	UpdateTime int64 `protobuf:"varint,18,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *CoinManagement) Reset() {
	*x = CoinManagement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinManagement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinManagement) ProtoMessage() {}

func (x *CoinManagement) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinManagement.ProtoReflect.Descriptor instead.
func (*CoinManagement) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{13}
}

func (x *CoinManagement) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CoinManagement) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CoinManagement) GetSettlementCoinId() int64 {
	if x != nil {
		return x.SettlementCoinId
	}
	return 0
}

func (x *CoinManagement) GetIncomeCoinId() int64 {
	if x != nil {
		return x.IncomeCoinId
	}
	return 0
}

func (x *CoinManagement) GetBeginTime() int64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *CoinManagement) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *CoinManagement) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CoinManagement) GetClosedDays() int64 {
	if x != nil {
		return x.ClosedDays
	}
	return 0
}

func (x *CoinManagement) GetIssuesNum() int64 {
	if x != nil {
		return x.IssuesNum
	}
	return 0
}

func (x *CoinManagement) GetSoldNum() int64 {
	if x != nil {
		return x.SoldNum
	}
	return 0
}

func (x *CoinManagement) GetMinBuyNum() int64 {
	if x != nil {
		return x.MinBuyNum
	}
	return 0
}

func (x *CoinManagement) GetMaxBuyNum() int64 {
	if x != nil {
		return x.MaxBuyNum
	}
	return 0
}

func (x *CoinManagement) GetIncomeType() string {
	if x != nil {
		return x.IncomeType
	}
	return ""
}

func (x *CoinManagement) GetIncomeRatio() float64 {
	if x != nil {
		return x.IncomeRatio
	}
	return 0
}

func (x *CoinManagement) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CoinManagement) GetWeigh() int64 {
	if x != nil {
		return x.Weigh
	}
	return 0
}

func (x *CoinManagement) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *CoinManagement) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type ManagementOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OrderNo          string          `protobuf:"bytes,2,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`
	UserId           int64           `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Refereeid        int64           `protobuf:"varint,4,opt,name=refereeid,proto3" json:"refereeid,omitempty"`
	TeamLeaderId     int64           `protobuf:"varint,5,opt,name=team_leader_id,json=teamLeaderId,proto3" json:"team_leader_id,omitempty"`
	CoinManagementId int64           `protobuf:"varint,6,opt,name=coin_management_id,json=coinManagementId,proto3" json:"coin_management_id,omitempty"`
	CoinManagement   *CoinManagement `protobuf:"bytes,22,opt,name=coin_management,json=coinManagement,proto3" json:"coin_management,omitempty"`
	SettlementCoinId int64           `protobuf:"varint,7,opt,name=settlement_coin_id,json=settlementCoinId,proto3" json:"settlement_coin_id,omitempty"`
	SettlementCoin   *Coin           `protobuf:"bytes,23,opt,name=settlement_coin,json=settlementCoin,proto3" json:"settlement_coin,omitempty"`
	IncomeCoinId     int64           `protobuf:"varint,8,opt,name=income_coin_id,json=incomeCoinId,proto3" json:"income_coin_id,omitempty"`
	IncomeCoin       *Coin           `protobuf:"bytes,24,opt,name=income_coin,json=incomeCoin,proto3" json:"income_coin,omitempty"`
	Price            float64         `protobuf:"fixed64,9,opt,name=price,proto3" json:"price,omitempty"`
	BuyNum           int64           `protobuf:"varint,10,opt,name=buy_num,json=buyNum,proto3" json:"buy_num,omitempty"`
	TotalPrice       float64         `protobuf:"fixed64,11,opt,name=total_price,json=totalPrice,proto3" json:"total_price,omitempty"`
	IncomeType       string          `protobuf:"bytes,12,opt,name=income_type,json=incomeType,proto3" json:"income_type,omitempty"`
	IncomeRatio      float64         `protobuf:"fixed64,13,opt,name=income_ratio,json=incomeRatio,proto3" json:"income_ratio,omitempty"`
	TotalIncome      float64         `protobuf:"fixed64,14,opt,name=total_income,json=totalIncome,proto3" json:"total_income,omitempty"`
	PaidIncome       float64         `protobuf:"fixed64,15,opt,name=paid_income,json=paidIncome,proto3" json:"paid_income,omitempty"`
	// 返利金额
	RebateIncome float64 `protobuf:"fixed64,16,opt,name=rebate_income,json=rebateIncome,proto3" json:"rebate_income,omitempty"`
	ClosedDays   int64   `protobuf:"varint,17,opt,name=closed_days,json=closedDays,proto3" json:"closed_days,omitempty"`
	// 1进行中2已完成3已终止
	Status string `protobuf:"bytes,18,opt,name=status,proto3" json:"status,omitempty"`
	// @gotags: gorm:"-"
	StatusText string `protobuf:"bytes,25,opt,name=status_text,json=statusText,proto3" json:"status_text,omitempty"`
	ExpireTime int64  `protobuf:"varint,19,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// @gotags: gorm:"autoCreateTime"
	CreateTime int64 `protobuf:"varint,20,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// @gotags: gorm:"autoUpdateTime"
	UpdateTime int64 `protobuf:"varint,21,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *ManagementOrder) Reset() {
	*x = ManagementOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagementOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagementOrder) ProtoMessage() {}

func (x *ManagementOrder) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagementOrder.ProtoReflect.Descriptor instead.
func (*ManagementOrder) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{14}
}

func (x *ManagementOrder) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ManagementOrder) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *ManagementOrder) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ManagementOrder) GetRefereeid() int64 {
	if x != nil {
		return x.Refereeid
	}
	return 0
}

func (x *ManagementOrder) GetTeamLeaderId() int64 {
	if x != nil {
		return x.TeamLeaderId
	}
	return 0
}

func (x *ManagementOrder) GetCoinManagementId() int64 {
	if x != nil {
		return x.CoinManagementId
	}
	return 0
}

func (x *ManagementOrder) GetCoinManagement() *CoinManagement {
	if x != nil {
		return x.CoinManagement
	}
	return nil
}

func (x *ManagementOrder) GetSettlementCoinId() int64 {
	if x != nil {
		return x.SettlementCoinId
	}
	return 0
}

func (x *ManagementOrder) GetSettlementCoin() *Coin {
	if x != nil {
		return x.SettlementCoin
	}
	return nil
}

func (x *ManagementOrder) GetIncomeCoinId() int64 {
	if x != nil {
		return x.IncomeCoinId
	}
	return 0
}

func (x *ManagementOrder) GetIncomeCoin() *Coin {
	if x != nil {
		return x.IncomeCoin
	}
	return nil
}

func (x *ManagementOrder) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ManagementOrder) GetBuyNum() int64 {
	if x != nil {
		return x.BuyNum
	}
	return 0
}

func (x *ManagementOrder) GetTotalPrice() float64 {
	if x != nil {
		return x.TotalPrice
	}
	return 0
}

func (x *ManagementOrder) GetIncomeType() string {
	if x != nil {
		return x.IncomeType
	}
	return ""
}

func (x *ManagementOrder) GetIncomeRatio() float64 {
	if x != nil {
		return x.IncomeRatio
	}
	return 0
}

func (x *ManagementOrder) GetTotalIncome() float64 {
	if x != nil {
		return x.TotalIncome
	}
	return 0
}

func (x *ManagementOrder) GetPaidIncome() float64 {
	if x != nil {
		return x.PaidIncome
	}
	return 0
}

func (x *ManagementOrder) GetRebateIncome() float64 {
	if x != nil {
		return x.RebateIncome
	}
	return 0
}

func (x *ManagementOrder) GetClosedDays() int64 {
	if x != nil {
		return x.ClosedDays
	}
	return 0
}

func (x *ManagementOrder) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ManagementOrder) GetStatusText() string {
	if x != nil {
		return x.StatusText
	}
	return ""
}

func (x *ManagementOrder) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *ManagementOrder) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ManagementOrder) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type Miners struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Image            string  `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Name             string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Model            string  `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	SettlementCoinId int64   `protobuf:"varint,5,opt,name=settlement_coin_id,json=settlementCoinId,proto3" json:"settlement_coin_id,omitempty"`
	Price            float64 `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`
	ProduceCoinId    int64   `protobuf:"varint,7,opt,name=produce_coin_id,json=produceCoinId,proto3" json:"produce_coin_id,omitempty"`
	GenIncome        int64   `protobuf:"varint,8,opt,name=gen_income,json=genIncome,proto3" json:"gen_income,omitempty"`
	MiningPower      int64   `protobuf:"varint,9,opt,name=mining_power,json=miningPower,proto3" json:"mining_power,omitempty"`
	RunDays          int64   `protobuf:"varint,10,opt,name=run_days,json=runDays,proto3" json:"run_days,omitempty"`
	IssuesNum        int64   `protobuf:"varint,11,opt,name=issues_num,json=issuesNum,proto3" json:"issues_num,omitempty"`
	SalesNum         int64   `protobuf:"varint,12,opt,name=sales_num,json=salesNum,proto3" json:"sales_num,omitempty"`
	BuyLimit         int64   `protobuf:"varint,13,opt,name=buy_limit,json=buyLimit,proto3" json:"buy_limit,omitempty"`
	Weigh            int64   `protobuf:"varint,14,opt,name=weigh,proto3" json:"weigh,omitempty"`
	CreateTime       int64   `protobuf:"varint,15,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime       int64   `protobuf:"varint,16,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Status           int64   `protobuf:"varint,17,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Miners) Reset() {
	*x = Miners{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Miners) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Miners) ProtoMessage() {}

func (x *Miners) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Miners.ProtoReflect.Descriptor instead.
func (*Miners) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{15}
}

func (x *Miners) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Miners) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Miners) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Miners) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Miners) GetSettlementCoinId() int64 {
	if x != nil {
		return x.SettlementCoinId
	}
	return 0
}

func (x *Miners) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Miners) GetProduceCoinId() int64 {
	if x != nil {
		return x.ProduceCoinId
	}
	return 0
}

func (x *Miners) GetGenIncome() int64 {
	if x != nil {
		return x.GenIncome
	}
	return 0
}

func (x *Miners) GetMiningPower() int64 {
	if x != nil {
		return x.MiningPower
	}
	return 0
}

func (x *Miners) GetRunDays() int64 {
	if x != nil {
		return x.RunDays
	}
	return 0
}

func (x *Miners) GetIssuesNum() int64 {
	if x != nil {
		return x.IssuesNum
	}
	return 0
}

func (x *Miners) GetSalesNum() int64 {
	if x != nil {
		return x.SalesNum
	}
	return 0
}

func (x *Miners) GetBuyLimit() int64 {
	if x != nil {
		return x.BuyLimit
	}
	return 0
}

func (x *Miners) GetWeigh() int64 {
	if x != nil {
		return x.Weigh
	}
	return 0
}

func (x *Miners) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Miners) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *Miners) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

type KlineData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StatType  string  `protobuf:"bytes,2,opt,name=stat_type,json=statType,proto3" json:"stat_type,omitempty"`
	Symbol    string  `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	StartTime int64   `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Open      float64 `protobuf:"fixed64,5,opt,name=open,proto3" json:"open,omitempty"`
	Close     float64 `protobuf:"fixed64,6,opt,name=close,proto3" json:"close,omitempty"`
	High      float64 `protobuf:"fixed64,7,opt,name=high,proto3" json:"high,omitempty"`
	Low       float64 `protobuf:"fixed64,8,opt,name=low,proto3" json:"low,omitempty"`
	// 成交量
	Volume float64 `protobuf:"fixed64,9,opt,name=volume,proto3" json:"volume,omitempty"`
	// 成交额
	QuoteVolume float64 `protobuf:"fixed64,10,opt,name=quote_volume,json=quoteVolume,proto3" json:"quote_volume,omitempty"`
}

func (x *KlineData) Reset() {
	*x = KlineData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KlineData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KlineData) ProtoMessage() {}

func (x *KlineData) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KlineData.ProtoReflect.Descriptor instead.
func (*KlineData) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{16}
}

func (x *KlineData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *KlineData) GetStatType() string {
	if x != nil {
		return x.StatType
	}
	return ""
}

func (x *KlineData) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *KlineData) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *KlineData) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *KlineData) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *KlineData) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *KlineData) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *KlineData) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *KlineData) GetQuoteVolume() float64 {
	if x != nil {
		return x.QuoteVolume
	}
	return 0
}

type TickerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Open float64 `protobuf:"fixed64,5,opt,name=open,proto3" json:"open,omitempty"`
	// 现价
	Price float64 `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`
	// 最高价
	High float64 `protobuf:"fixed64,7,opt,name=high,proto3" json:"high,omitempty"`
	// 最低价
	Low float64 `protobuf:"fixed64,8,opt,name=low,proto3" json:"low,omitempty"`
	// 成交量
	Volume float64 `protobuf:"fixed64,9,opt,name=volume,proto3" json:"volume,omitempty"`
	// 24h 成交额
	QuoteVolume float64 `protobuf:"fixed64,10,opt,name=quote_volume,json=quoteVolume,proto3" json:"quote_volume,omitempty"`
	// 涨跌幅
	PriceChangePercent float64 `protobuf:"fixed64,11,opt,name=price_change_percent,json=priceChangePercent,proto3" json:"price_change_percent,omitempty"`
}

func (x *TickerData) Reset() {
	*x = TickerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickerData) ProtoMessage() {}

func (x *TickerData) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickerData.ProtoReflect.Descriptor instead.
func (*TickerData) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{17}
}

func (x *TickerData) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *TickerData) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TickerData) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *TickerData) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *TickerData) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *TickerData) GetQuoteVolume() float64 {
	if x != nil {
		return x.QuoteVolume
	}
	return 0
}

func (x *TickerData) GetPriceChangePercent() float64 {
	if x != nil {
		return x.PriceChangePercent
	}
	return 0
}

type MinersExchange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code          string  `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	MinersId      int64   `protobuf:"varint,3,opt,name=miners_id,json=minersId,proto3" json:"miners_id,omitempty"`
	UserId        int64   `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrderNo       string  `protobuf:"bytes,5,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`
	TotalNum      int64   `protobuf:"varint,6,opt,name=total_num,json=totalNum,proto3" json:"total_num,omitempty"`
	UsedNum       int64   `protobuf:"varint,7,opt,name=used_num,json=usedNum,proto3" json:"used_num,omitempty"`
	DiscountRatio float64 `protobuf:"fixed64,8,opt,name=discount_ratio,json=discountRatio,proto3" json:"discount_ratio,omitempty"`
	Status        int64   `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime    int64   `protobuf:"varint,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime    int64   `protobuf:"varint,11,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *MinersExchange) Reset() {
	*x = MinersExchange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinersExchange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinersExchange) ProtoMessage() {}

func (x *MinersExchange) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinersExchange.ProtoReflect.Descriptor instead.
func (*MinersExchange) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{18}
}

func (x *MinersExchange) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MinersExchange) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *MinersExchange) GetMinersId() int64 {
	if x != nil {
		return x.MinersId
	}
	return 0
}

func (x *MinersExchange) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MinersExchange) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *MinersExchange) GetTotalNum() int64 {
	if x != nil {
		return x.TotalNum
	}
	return 0
}

func (x *MinersExchange) GetUsedNum() int64 {
	if x != nil {
		return x.UsedNum
	}
	return 0
}

func (x *MinersExchange) GetDiscountRatio() float64 {
	if x != nil {
		return x.DiscountRatio
	}
	return 0
}

func (x *MinersExchange) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MinersExchange) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *MinersExchange) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type MinersOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MinersId         int64   `protobuf:"varint,2,opt,name=miners_id,json=minersId,proto3" json:"miners_id,omitempty"`
	UserId           int64   `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Refereeid        int64   `protobuf:"varint,4,opt,name=refereeid,proto3" json:"refereeid,omitempty"`
	TeamLeaderId     int64   `protobuf:"varint,5,opt,name=team_leader_id,json=teamLeaderId,proto3" json:"team_leader_id,omitempty"`
	SettlementCoinId int64   `protobuf:"varint,6,opt,name=settlement_coin_id,json=settlementCoinId,proto3" json:"settlement_coin_id,omitempty"`
	ProduceCoinId    int64   `protobuf:"varint,7,opt,name=produce_coin_id,json=produceCoinId,proto3" json:"produce_coin_id,omitempty"`
	OrderNo          string  `protobuf:"bytes,8,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`
	Price            float64 `protobuf:"fixed64,9,opt,name=price,proto3" json:"price,omitempty"`
	Num              int64   `protobuf:"varint,10,opt,name=num,proto3" json:"num,omitempty"`
	TotalPrice       float64 `protobuf:"fixed64,11,opt,name=total_price,json=totalPrice,proto3" json:"total_price,omitempty"`
	ExchangeCode     string  `protobuf:"bytes,12,opt,name=exchange_code,json=exchangeCode,proto3" json:"exchange_code,omitempty"`
	DiscountRatio    float64 `protobuf:"fixed64,13,opt,name=discount_ratio,json=discountRatio,proto3" json:"discount_ratio,omitempty"`
	DiscountAmount   float64 `protobuf:"fixed64,14,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"`
	RealPay          float64 `protobuf:"fixed64,15,opt,name=real_pay,json=realPay,proto3" json:"real_pay,omitempty"`
	EstimatedIncome  float64 `protobuf:"fixed64,16,opt,name=estimated_income,json=estimatedIncome,proto3" json:"estimated_income,omitempty"`
	GainedIncome     float64 `protobuf:"fixed64,17,opt,name=gained_income,json=gainedIncome,proto3" json:"gained_income,omitempty"`
	PendingIncome    float64 `protobuf:"fixed64,18,opt,name=pending_income,json=pendingIncome,proto3" json:"pending_income,omitempty"`
	Bonus            float64 `protobuf:"fixed64,19,opt,name=bonus,proto3" json:"bonus,omitempty"`
	RunMinutes       int64   `protobuf:"varint,20,opt,name=run_minutes,json=runMinutes,proto3" json:"run_minutes,omitempty"`
	RunDays          int64   `protobuf:"varint,21,opt,name=run_days,json=runDays,proto3" json:"run_days,omitempty"`
	Status           string  `protobuf:"bytes,22,opt,name=status,proto3" json:"status,omitempty"` // enum ('1', '2', '3')
	ExpireTime       int64   `protobuf:"varint,23,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// @gotags: gorm:"autoCreateTime"
	CreateTime int64 `protobuf:"varint,24,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// @gotags: gorm:"autoUpdateTime"
	UpdateTime int64   `protobuf:"varint,25,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Miners     *Miners `protobuf:"bytes,26,opt,name=miners,proto3" json:"miners,omitempty"`
}

func (x *MinersOrder) Reset() {
	*x = MinersOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinersOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinersOrder) ProtoMessage() {}

func (x *MinersOrder) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinersOrder.ProtoReflect.Descriptor instead.
func (*MinersOrder) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{19}
}

func (x *MinersOrder) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MinersOrder) GetMinersId() int64 {
	if x != nil {
		return x.MinersId
	}
	return 0
}

func (x *MinersOrder) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MinersOrder) GetRefereeid() int64 {
	if x != nil {
		return x.Refereeid
	}
	return 0
}

func (x *MinersOrder) GetTeamLeaderId() int64 {
	if x != nil {
		return x.TeamLeaderId
	}
	return 0
}

func (x *MinersOrder) GetSettlementCoinId() int64 {
	if x != nil {
		return x.SettlementCoinId
	}
	return 0
}

func (x *MinersOrder) GetProduceCoinId() int64 {
	if x != nil {
		return x.ProduceCoinId
	}
	return 0
}

func (x *MinersOrder) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *MinersOrder) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MinersOrder) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *MinersOrder) GetTotalPrice() float64 {
	if x != nil {
		return x.TotalPrice
	}
	return 0
}

func (x *MinersOrder) GetExchangeCode() string {
	if x != nil {
		return x.ExchangeCode
	}
	return ""
}

func (x *MinersOrder) GetDiscountRatio() float64 {
	if x != nil {
		return x.DiscountRatio
	}
	return 0
}

func (x *MinersOrder) GetDiscountAmount() float64 {
	if x != nil {
		return x.DiscountAmount
	}
	return 0
}

func (x *MinersOrder) GetRealPay() float64 {
	if x != nil {
		return x.RealPay
	}
	return 0
}

func (x *MinersOrder) GetEstimatedIncome() float64 {
	if x != nil {
		return x.EstimatedIncome
	}
	return 0
}

func (x *MinersOrder) GetGainedIncome() float64 {
	if x != nil {
		return x.GainedIncome
	}
	return 0
}

func (x *MinersOrder) GetPendingIncome() float64 {
	if x != nil {
		return x.PendingIncome
	}
	return 0
}

func (x *MinersOrder) GetBonus() float64 {
	if x != nil {
		return x.Bonus
	}
	return 0
}

func (x *MinersOrder) GetRunMinutes() int64 {
	if x != nil {
		return x.RunMinutes
	}
	return 0
}

func (x *MinersOrder) GetRunDays() int64 {
	if x != nil {
		return x.RunDays
	}
	return 0
}

func (x *MinersOrder) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MinersOrder) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *MinersOrder) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *MinersOrder) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *MinersOrder) GetMiners() *Miners {
	if x != nil {
		return x.Miners
	}
	return nil
}

type UserAssets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CoinId int64 `protobuf:"varint,3,opt,name=coin_id,json=coinId,proto3" json:"coin_id,omitempty"`
	// @gotags: gorm:"-"
	CoinName string  `protobuf:"bytes,9,opt,name=coin_name,json=coinName,proto3" json:"coin_name,omitempty"`
	Balance  float64 `protobuf:"fixed64,4,opt,name=balance,proto3" json:"balance,omitempty"`
	Freeze   float64 `protobuf:"fixed64,5,opt,name=freeze,proto3" json:"freeze,omitempty"`
	Address  string  `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	// @gotags: gorm:"autoCreateTime"
	CreateTime int64 `protobuf:"varint,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// @gotags: gorm:"autoUpdateTime"
	UpdateTime int64 `protobuf:"varint,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *UserAssets) Reset() {
	*x = UserAssets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAssets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAssets) ProtoMessage() {}

func (x *UserAssets) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAssets.ProtoReflect.Descriptor instead.
func (*UserAssets) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{20}
}

func (x *UserAssets) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserAssets) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserAssets) GetCoinId() int64 {
	if x != nil {
		return x.CoinId
	}
	return 0
}

func (x *UserAssets) GetCoinName() string {
	if x != nil {
		return x.CoinName
	}
	return ""
}

func (x *UserAssets) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *UserAssets) GetFreeze() float64 {
	if x != nil {
		return x.Freeze
	}
	return 0
}

func (x *UserAssets) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UserAssets) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UserAssets) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type UserCoinChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId     int64   `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CoinId     int64   `protobuf:"varint,3,opt,name=coin_id,json=coinId,proto3" json:"coin_id,omitempty"`
	Amount     float64 `protobuf:"fixed64,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Before     float64 `protobuf:"fixed64,5,opt,name=before,proto3" json:"before,omitempty"`
	After      float64 `protobuf:"fixed64,6,opt,name=after,proto3" json:"after,omitempty"`
	Type       string  `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	FromUserId int64   `protobuf:"varint,8,opt,name=from_user_id,json=fromUserId,proto3" json:"from_user_id,omitempty"`
	ToUserId   int64   `protobuf:"varint,9,opt,name=to_user_id,json=toUserId,proto3" json:"to_user_id,omitempty"`
	// 引起余额变动的订单号
	ReferrerId int64 `protobuf:"varint,12,opt,name=referrer_id,json=referrerId,proto3" json:"referrer_id,omitempty"`
	// @gotags: gorm:"autoCreateTime"
	CreateTime int64  `protobuf:"varint,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	Remark     string `protobuf:"bytes,11,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *UserCoinChange) Reset() {
	*x = UserCoinChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCoinChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCoinChange) ProtoMessage() {}

func (x *UserCoinChange) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCoinChange.ProtoReflect.Descriptor instead.
func (*UserCoinChange) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{21}
}

func (x *UserCoinChange) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserCoinChange) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserCoinChange) GetCoinId() int64 {
	if x != nil {
		return x.CoinId
	}
	return 0
}

func (x *UserCoinChange) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *UserCoinChange) GetBefore() float64 {
	if x != nil {
		return x.Before
	}
	return 0
}

func (x *UserCoinChange) GetAfter() float64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *UserCoinChange) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UserCoinChange) GetFromUserId() int64 {
	if x != nil {
		return x.FromUserId
	}
	return 0
}

func (x *UserCoinChange) GetToUserId() int64 {
	if x != nil {
		return x.ToUserId
	}
	return 0
}

func (x *UserCoinChange) GetReferrerId() int64 {
	if x != nil {
		return x.ReferrerId
	}
	return 0
}

func (x *UserCoinChange) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UserCoinChange) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type CoinRecharge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId       int64   `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TradeId      string  `protobuf:"bytes,3,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	Amount       float64 `protobuf:"fixed64,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Address      string  `protobuf:"bytes,13,opt,name=address,proto3" json:"address,omitempty"`
	MainCoinType string  `protobuf:"bytes,14,opt,name=main_coin_type,json=mainCoinType,proto3" json:"main_coin_type,omitempty"`
	TxId         string  `protobuf:"bytes,15,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	// @gotags: gorm:"autoCreateTime"
	CreateTime int64 `protobuf:"varint,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *CoinRecharge) Reset() {
	*x = CoinRecharge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinRecharge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinRecharge) ProtoMessage() {}

func (x *CoinRecharge) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinRecharge.ProtoReflect.Descriptor instead.
func (*CoinRecharge) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{22}
}

func (x *CoinRecharge) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CoinRecharge) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CoinRecharge) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *CoinRecharge) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CoinRecharge) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CoinRecharge) GetMainCoinType() string {
	if x != nil {
		return x.MainCoinType
	}
	return ""
}

func (x *CoinRecharge) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *CoinRecharge) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ManChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId int64   `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Amount float64 `protobuf:"fixed64,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Before float64 `protobuf:"fixed64,5,opt,name=before,proto3" json:"before,omitempty"`
	After  float64 `protobuf:"fixed64,6,opt,name=after,proto3" json:"after,omitempty"`
	Type   string  `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	// @gotags: gorm:"-"
	TypeName   string `protobuf:"bytes,14,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	FromUserId int64  `protobuf:"varint,8,opt,name=from_user_id,json=fromUserId,proto3" json:"from_user_id,omitempty"`
	// 引起余额变动的订单号
	ReferrerId int64 `protobuf:"varint,12,opt,name=referrer_id,json=referrerId,proto3" json:"referrer_id,omitempty"`
	// @gotags: gorm:"autoCreateTime"
	CreateTime int64 `protobuf:"varint,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// @gotags: gorm:"autoUpdateTime"
	UpdateTime int64  `protobuf:"varint,13,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Remark     string `protobuf:"bytes,11,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *ManChange) Reset() {
	*x = ManChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManChange) ProtoMessage() {}

func (x *ManChange) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManChange.ProtoReflect.Descriptor instead.
func (*ManChange) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{23}
}

func (x *ManChange) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ManChange) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ManChange) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ManChange) GetBefore() float64 {
	if x != nil {
		return x.Before
	}
	return 0
}

func (x *ManChange) GetAfter() float64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *ManChange) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ManChange) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *ManChange) GetFromUserId() int64 {
	if x != nil {
		return x.FromUserId
	}
	return 0
}

func (x *ManChange) GetReferrerId() int64 {
	if x != nil {
		return x.ReferrerId
	}
	return 0
}

func (x *ManChange) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ManChange) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *ManChange) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type Lecturer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                       // Primary key
	AvatarImage       string `protobuf:"bytes,2,opt,name=avatar_image,json=avatarImage,proto3" json:"avatar_image,omitempty"`                   // Avatar image
	CommunityName     string `protobuf:"bytes,3,opt,name=community_name,json=communityName,proto3" json:"community_name,omitempty"`             // Community name
	CommunityUserNum  int64  `protobuf:"varint,4,opt,name=community_user_num,json=communityUserNum,proto3" json:"community_user_num,omitempty"` // Community user number
	LecturerName      string `protobuf:"bytes,5,opt,name=lecturer_name,json=lecturerName,proto3" json:"lecturer_name,omitempty"`                // Lecturer name
	Margin            string `protobuf:"bytes,6,opt,name=margin,proto3" json:"margin,omitempty"`                                                // Margin
	WinningPercentage string `protobuf:"bytes,7,opt,name=winning_percentage,json=winningPercentage,proto3" json:"winning_percentage,omitempty"` // Winning percentage
	Weigh             int64  `protobuf:"varint,8,opt,name=weigh,proto3" json:"weigh,omitempty"`                                                 // Weigh
	Status            int64  `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`                                               // Status
	// @gotags: gorm:"autoCreateTime"
	CreateTime int64 `protobuf:"varint,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// @gotags: gorm:"autoUpdateTime"
	UpdateTime int64 `protobuf:"varint,13,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *Lecturer) Reset() {
	*x = Lecturer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lecturer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lecturer) ProtoMessage() {}

func (x *Lecturer) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lecturer.ProtoReflect.Descriptor instead.
func (*Lecturer) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{24}
}

func (x *Lecturer) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Lecturer) GetAvatarImage() string {
	if x != nil {
		return x.AvatarImage
	}
	return ""
}

func (x *Lecturer) GetCommunityName() string {
	if x != nil {
		return x.CommunityName
	}
	return ""
}

func (x *Lecturer) GetCommunityUserNum() int64 {
	if x != nil {
		return x.CommunityUserNum
	}
	return 0
}

func (x *Lecturer) GetLecturerName() string {
	if x != nil {
		return x.LecturerName
	}
	return ""
}

func (x *Lecturer) GetMargin() string {
	if x != nil {
		return x.Margin
	}
	return ""
}

func (x *Lecturer) GetWinningPercentage() string {
	if x != nil {
		return x.WinningPercentage
	}
	return ""
}

func (x *Lecturer) GetWeigh() int64 {
	if x != nil {
		return x.Weigh
	}
	return 0
}

func (x *Lecturer) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Lecturer) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Lecturer) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type UserCommissionChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId     int64   `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Amount     float64 `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Before     float64 `protobuf:"fixed64,4,opt,name=before,proto3" json:"before,omitempty"`
	After      float64 `protobuf:"fixed64,5,opt,name=after,proto3" json:"after,omitempty"`
	Type       string  `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	TypeName   string  `protobuf:"bytes,14,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	FromUserId int64   `protobuf:"varint,7,opt,name=from_user_id,json=fromUserId,proto3" json:"from_user_id,omitempty"`
	// 引起余额变动的订单号
	ReferrerId int64  `protobuf:"varint,12,opt,name=referrer_id,json=referrerId,proto3" json:"referrer_id,omitempty"`
	Remark     string `protobuf:"bytes,8,opt,name=remark,proto3" json:"remark,omitempty"`
	// @gotags: gorm:"autoCreateTime"
	CreateTime int64 `protobuf:"varint,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// @gotags: gorm:"autoUpdateTime"
	UpdateTime int64 `protobuf:"varint,13,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *UserCommissionChange) Reset() {
	*x = UserCommissionChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCommissionChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCommissionChange) ProtoMessage() {}

func (x *UserCommissionChange) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCommissionChange.ProtoReflect.Descriptor instead.
func (*UserCommissionChange) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{25}
}

func (x *UserCommissionChange) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserCommissionChange) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserCommissionChange) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *UserCommissionChange) GetBefore() float64 {
	if x != nil {
		return x.Before
	}
	return 0
}

func (x *UserCommissionChange) GetAfter() float64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *UserCommissionChange) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UserCommissionChange) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *UserCommissionChange) GetFromUserId() int64 {
	if x != nil {
		return x.FromUserId
	}
	return 0
}

func (x *UserCommissionChange) GetReferrerId() int64 {
	if x != nil {
		return x.ReferrerId
	}
	return 0
}

func (x *UserCommissionChange) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UserCommissionChange) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UserCommissionChange) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type FinancialWithdraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                    // Primary key
	UserId          int64   `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                              // default '0' not null
	Refereeid       int64   `protobuf:"varint,3,opt,name=refereeid,proto3" json:"refereeid,omitempty"`                                      // null
	TeamLeaderId    int64   `protobuf:"varint,4,opt,name=team_leader_id,json=teamLeaderId,proto3" json:"team_leader_id,omitempty"`          // null
	Type            string  `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`                                                 // enum ('0', '1') not null
	CoinId          int64   `protobuf:"varint,6,opt,name=coin_id,json=coinId,proto3" json:"coin_id,omitempty"`                              // default '0' null
	FinancialCardId int64   `protobuf:"varint,7,opt,name=financial_card_id,json=financialCardId,proto3" json:"financial_card_id,omitempty"` // default '0' null
	OrderNo         string  `protobuf:"bytes,8,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`                            // default '' not null
	Money           float32 `protobuf:"fixed32,9,opt,name=money,proto3" json:"money,omitempty"`                                             // decimal(10, 2) default 0.00 null
	CoinNum         float32 `protobuf:"fixed32,10,opt,name=coin_num,json=coinNum,proto3" json:"coin_num,omitempty"`                         // decimal(10, 2) default 0.00 null
	Price           float32 `protobuf:"fixed32,11,opt,name=price,proto3" json:"price,omitempty"`                                            // decimal(10, 2) default 0.00 null
	WalletType      string  `protobuf:"bytes,12,opt,name=wallet_type,json=walletType,proto3" json:"wallet_type,omitempty"`                  // default '' null
	WalletAddress   string  `protobuf:"bytes,13,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`         // default '' null
	AddressId       int64   `protobuf:"varint,14,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`                    // null
	FeeRatio        float32 `protobuf:"fixed32,15,opt,name=fee_ratio,json=feeRatio,proto3" json:"fee_ratio,omitempty"`                      // decimal(10, 2) default 0.00 null
	FeeMoney        float32 `protobuf:"fixed32,16,opt,name=fee_money,json=feeMoney,proto3" json:"fee_money,omitempty"`                      // decimal(10, 2) default 0.00 null
	FeeCoin         float32 `protobuf:"fixed32,17,opt,name=fee_coin,json=feeCoin,proto3" json:"fee_coin,omitempty"`                         // decimal(10, 2) default 0.00 null
	ActualMoney     float32 `protobuf:"fixed32,18,opt,name=actual_money,json=actualMoney,proto3" json:"actual_money,omitempty"`             // decimal(10, 2) default 0.00 null
	ActualCoin      float32 `protobuf:"fixed32,19,opt,name=actual_coin,json=actualCoin,proto3" json:"actual_coin,omitempty"`                // decimal(10, 2) default 0.00 null
	Status          string  `protobuf:"bytes,20,opt,name=status,proto3" json:"status,omitempty"`                                            // enum ('0', '1', '2', '3', '4') default '0' not null
	// @gotags: gorm:"-"
	StatusText string `protobuf:"bytes,24,opt,name=status_text,json=statusText,proto3" json:"status_text,omitempty"`
	Remark     string `protobuf:"bytes,21,opt,name=remark,proto3" json:"remark,omitempty"` // null
	// @gotags: gorm:"autoCreateTime"
	CreateTime int64 `protobuf:"varint,22,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// @gotags: gorm:"autoUpdateTime"
	UpdateTime    int64          `protobuf:"varint,23,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	FinancialCard *FinancialCard `protobuf:"bytes,25,opt,name=FinancialCard,proto3" json:"FinancialCard,omitempty"`
}

func (x *FinancialWithdraw) Reset() {
	*x = FinancialWithdraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinancialWithdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialWithdraw) ProtoMessage() {}

func (x *FinancialWithdraw) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialWithdraw.ProtoReflect.Descriptor instead.
func (*FinancialWithdraw) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{26}
}

func (x *FinancialWithdraw) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FinancialWithdraw) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FinancialWithdraw) GetRefereeid() int64 {
	if x != nil {
		return x.Refereeid
	}
	return 0
}

func (x *FinancialWithdraw) GetTeamLeaderId() int64 {
	if x != nil {
		return x.TeamLeaderId
	}
	return 0
}

func (x *FinancialWithdraw) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FinancialWithdraw) GetCoinId() int64 {
	if x != nil {
		return x.CoinId
	}
	return 0
}

func (x *FinancialWithdraw) GetFinancialCardId() int64 {
	if x != nil {
		return x.FinancialCardId
	}
	return 0
}

func (x *FinancialWithdraw) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *FinancialWithdraw) GetMoney() float32 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *FinancialWithdraw) GetCoinNum() float32 {
	if x != nil {
		return x.CoinNum
	}
	return 0
}

func (x *FinancialWithdraw) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *FinancialWithdraw) GetWalletType() string {
	if x != nil {
		return x.WalletType
	}
	return ""
}

func (x *FinancialWithdraw) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *FinancialWithdraw) GetAddressId() int64 {
	if x != nil {
		return x.AddressId
	}
	return 0
}

func (x *FinancialWithdraw) GetFeeRatio() float32 {
	if x != nil {
		return x.FeeRatio
	}
	return 0
}

func (x *FinancialWithdraw) GetFeeMoney() float32 {
	if x != nil {
		return x.FeeMoney
	}
	return 0
}

func (x *FinancialWithdraw) GetFeeCoin() float32 {
	if x != nil {
		return x.FeeCoin
	}
	return 0
}

func (x *FinancialWithdraw) GetActualMoney() float32 {
	if x != nil {
		return x.ActualMoney
	}
	return 0
}

func (x *FinancialWithdraw) GetActualCoin() float32 {
	if x != nil {
		return x.ActualCoin
	}
	return 0
}

func (x *FinancialWithdraw) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FinancialWithdraw) GetStatusText() string {
	if x != nil {
		return x.StatusText
	}
	return ""
}

func (x *FinancialWithdraw) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *FinancialWithdraw) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *FinancialWithdraw) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *FinancialWithdraw) GetFinancialCard() *FinancialCard {
	if x != nil {
		return x.FinancialCard
	}
	return nil
}

type FinancialRecharge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                 // Primary key
	UserId                   int64   `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                           // default '0' not null
	OrderNo                  string  `protobuf:"bytes,3,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`                                                         // default '' not null
	Name                     string  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                                                              // null
	FinancialPaymentMethodId int64   `protobuf:"varint,5,opt,name=financial_payment_method_id,json=financialPaymentMethodId,proto3" json:"financial_payment_method_id,omitempty"` // default '0' not null
	Amount                   float32 `protobuf:"fixed32,6,opt,name=amount,proto3" json:"amount,omitempty"`                                                                        // decimal(16, 2) default 0.00 not null
	FeeRatio                 float32 `protobuf:"fixed32,7,opt,name=fee_ratio,json=feeRatio,proto3" json:"fee_ratio,omitempty"`                                                    // decimal(16, 2) default 0.00 not null
	Fee                      float32 `protobuf:"fixed32,8,opt,name=fee,proto3" json:"fee,omitempty"`                                                                              // decimal(16, 2) default 0.00 not null
	ActualMoney              float32 `protobuf:"fixed32,9,opt,name=actual_money,json=actualMoney,proto3" json:"actual_money,omitempty"`                                           // decimal(16, 2) default 0.00 not null
	MainCoinNum              float32 `protobuf:"fixed32,10,opt,name=main_coin_num,json=mainCoinNum,proto3" json:"main_coin_num,omitempty"`                                        // decimal(16, 2) default 0.00 not null
	MainCoinFee              float32 `protobuf:"fixed32,11,opt,name=main_coin_fee,json=mainCoinFee,proto3" json:"main_coin_fee,omitempty"`                                        // decimal(16, 2) default 0.00 null
	CoinPrice                float32 `protobuf:"fixed32,12,opt,name=coin_price,json=coinPrice,proto3" json:"coin_price,omitempty"`                                                // decimal(16, 2) default 0.00 not null
	CallbackData             string  `protobuf:"bytes,13,opt,name=callback_data,json=callbackData,proto3" json:"callback_data,omitempty"`                                         // default '' null
	Status                   string  `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`                                                                         // enum ('0', '1', '2', '3') default '0' not null // 0等待支付1已完成2已取消3虚拟到账
	// @gotags: gorm:"-"
	StatusText string `protobuf:"bytes,24,opt,name=status_text,json=statusText,proto3" json:"status_text,omitempty"`
	// @gotags: gorm:"autoCreateTime"
	CreateTime int64 `protobuf:"varint,15,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` // null
	// @gotags: gorm:"autoUpdateTime"
	UpdateTime int64 `protobuf:"varint,16,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"` // null
}

func (x *FinancialRecharge) Reset() {
	*x = FinancialRecharge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinancialRecharge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialRecharge) ProtoMessage() {}

func (x *FinancialRecharge) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialRecharge.ProtoReflect.Descriptor instead.
func (*FinancialRecharge) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{27}
}

func (x *FinancialRecharge) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FinancialRecharge) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FinancialRecharge) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *FinancialRecharge) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FinancialRecharge) GetFinancialPaymentMethodId() int64 {
	if x != nil {
		return x.FinancialPaymentMethodId
	}
	return 0
}

func (x *FinancialRecharge) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *FinancialRecharge) GetFeeRatio() float32 {
	if x != nil {
		return x.FeeRatio
	}
	return 0
}

func (x *FinancialRecharge) GetFee() float32 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *FinancialRecharge) GetActualMoney() float32 {
	if x != nil {
		return x.ActualMoney
	}
	return 0
}

func (x *FinancialRecharge) GetMainCoinNum() float32 {
	if x != nil {
		return x.MainCoinNum
	}
	return 0
}

func (x *FinancialRecharge) GetMainCoinFee() float32 {
	if x != nil {
		return x.MainCoinFee
	}
	return 0
}

func (x *FinancialRecharge) GetCoinPrice() float32 {
	if x != nil {
		return x.CoinPrice
	}
	return 0
}

func (x *FinancialRecharge) GetCallbackData() string {
	if x != nil {
		return x.CallbackData
	}
	return ""
}

func (x *FinancialRecharge) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FinancialRecharge) GetStatusText() string {
	if x != nil {
		return x.StatusText
	}
	return ""
}

func (x *FinancialRecharge) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *FinancialRecharge) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type FinancialPaymentMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primary key
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the payment method
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short name of the payment method
	ShortName string `protobuf:"bytes,3,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	// Type of the payment method
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Bank account associated with the payment method
	BankAccount string `protobuf:"bytes,5,opt,name=bank_account,json=bankAccount,proto3" json:"bank_account,omitempty"`
	// QR code image URL
	QrcodeImage string `protobuf:"bytes,6,opt,name=qrcode_image,json=qrcodeImage,proto3" json:"qrcode_image,omitempty"`
	// Merchant number
	MerchantNum string `protobuf:"bytes,7,opt,name=merchant_num,json=merchantNum,proto3" json:"merchant_num,omitempty"`
	// Encryption key
	EncryptionKey string `protobuf:"bytes,8,opt,name=encryption_key,json=encryptionKey,proto3" json:"encryption_key,omitempty"`
	// Other encryption key
	OtherEncryptionKey string `protobuf:"bytes,9,opt,name=other_encryption_key,json=otherEncryptionKey,proto3" json:"other_encryption_key,omitempty"`
	// Payment channels
	PaymentChannels string `protobuf:"bytes,10,opt,name=payment_channels,json=paymentChannels,proto3" json:"payment_channels,omitempty"`
	// URL associated with the payment method
	Url string `protobuf:"bytes,11,opt,name=url,proto3" json:"url,omitempty"`
	// Minimum amount
	MinAmount float32 `protobuf:"fixed32,12,opt,name=min_amount,json=minAmount,proto3" json:"min_amount,omitempty"`
	// Maximum amount
	MaxAmount float32 `protobuf:"fixed32,13,opt,name=max_amount,json=maxAmount,proto3" json:"max_amount,omitempty"`
	// Fee ratio
	FeeRatio float32 `protobuf:"fixed32,14,opt,name=fee_ratio,json=feeRatio,proto3" json:"fee_ratio,omitempty"`
	// Status of the payment method
	Status int64 `protobuf:"varint,15,opt,name=status,proto3" json:"status,omitempty"`
	// Weigh
	Weigh int64 `protobuf:"varint,16,opt,name=weigh,proto3" json:"weigh,omitempty"`
	// Creation time
	CreateTime int64 `protobuf:"varint,17,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Update time
	UpdateTime int64 `protobuf:"varint,18,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *FinancialPaymentMethod) Reset() {
	*x = FinancialPaymentMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinancialPaymentMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialPaymentMethod) ProtoMessage() {}

func (x *FinancialPaymentMethod) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialPaymentMethod.ProtoReflect.Descriptor instead.
func (*FinancialPaymentMethod) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{28}
}

func (x *FinancialPaymentMethod) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FinancialPaymentMethod) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FinancialPaymentMethod) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *FinancialPaymentMethod) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FinancialPaymentMethod) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *FinancialPaymentMethod) GetQrcodeImage() string {
	if x != nil {
		return x.QrcodeImage
	}
	return ""
}

func (x *FinancialPaymentMethod) GetMerchantNum() string {
	if x != nil {
		return x.MerchantNum
	}
	return ""
}

func (x *FinancialPaymentMethod) GetEncryptionKey() string {
	if x != nil {
		return x.EncryptionKey
	}
	return ""
}

func (x *FinancialPaymentMethod) GetOtherEncryptionKey() string {
	if x != nil {
		return x.OtherEncryptionKey
	}
	return ""
}

func (x *FinancialPaymentMethod) GetPaymentChannels() string {
	if x != nil {
		return x.PaymentChannels
	}
	return ""
}

func (x *FinancialPaymentMethod) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FinancialPaymentMethod) GetMinAmount() float32 {
	if x != nil {
		return x.MinAmount
	}
	return 0
}

func (x *FinancialPaymentMethod) GetMaxAmount() float32 {
	if x != nil {
		return x.MaxAmount
	}
	return 0
}

func (x *FinancialPaymentMethod) GetFeeRatio() float32 {
	if x != nil {
		return x.FeeRatio
	}
	return 0
}

func (x *FinancialPaymentMethod) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FinancialPaymentMethod) GetWeigh() int64 {
	if x != nil {
		return x.Weigh
	}
	return 0
}

func (x *FinancialPaymentMethod) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *FinancialPaymentMethod) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type CoinContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // Primary key
	CoinId          int64   `protobuf:"varint,2,opt,name=coin_id,json=coinId,proto3" json:"coin_id,omitempty"`
	BuyingCycle     int64   `protobuf:"varint,3,opt,name=buying_cycle,json=buyingCycle,proto3" json:"buying_cycle,omitempty"`
	BuyingCycleUnit string  `protobuf:"bytes,4,opt,name=buying_cycle_unit,json=buyingCycleUnit,proto3" json:"buying_cycle_unit,omitempty"`
	ProfitRatioUp   float32 `protobuf:"fixed32,5,opt,name=profit_ratio_up,json=profitRatioUp,proto3" json:"profit_ratio_up,omitempty"`
	ProfitRatioDown float32 `protobuf:"fixed32,6,opt,name=profit_ratio_down,json=profitRatioDown,proto3" json:"profit_ratio_down,omitempty"`
	PurchaseUp      float32 `protobuf:"fixed32,7,opt,name=purchase_up,json=purchaseUp,proto3" json:"purchase_up,omitempty"`
	PurchaseDown    float32 `protobuf:"fixed32,8,opt,name=purchase_down,json=purchaseDown,proto3" json:"purchase_down,omitempty"`
	LossRatioUp     float32 `protobuf:"fixed32,9,opt,name=loss_ratio_up,json=lossRatioUp,proto3" json:"loss_ratio_up,omitempty"`
	LossRatioDown   float32 `protobuf:"fixed32,10,opt,name=loss_ratio_down,json=lossRatioDown,proto3" json:"loss_ratio_down,omitempty"`
	FeeRatio        float32 `protobuf:"fixed32,11,opt,name=fee_ratio,json=feeRatio,proto3" json:"fee_ratio,omitempty"`
	IsProfit        int64   `protobuf:"varint,12,opt,name=is_profit,json=isProfit,proto3" json:"is_profit,omitempty"`
	Status          int64   `protobuf:"varint,13,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime      int64   `protobuf:"varint,14,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime      int64   `protobuf:"varint,15,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *CoinContract) Reset() {
	*x = CoinContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinContract) ProtoMessage() {}

func (x *CoinContract) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinContract.ProtoReflect.Descriptor instead.
func (*CoinContract) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{29}
}

func (x *CoinContract) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CoinContract) GetCoinId() int64 {
	if x != nil {
		return x.CoinId
	}
	return 0
}

func (x *CoinContract) GetBuyingCycle() int64 {
	if x != nil {
		return x.BuyingCycle
	}
	return 0
}

func (x *CoinContract) GetBuyingCycleUnit() string {
	if x != nil {
		return x.BuyingCycleUnit
	}
	return ""
}

func (x *CoinContract) GetProfitRatioUp() float32 {
	if x != nil {
		return x.ProfitRatioUp
	}
	return 0
}

func (x *CoinContract) GetProfitRatioDown() float32 {
	if x != nil {
		return x.ProfitRatioDown
	}
	return 0
}

func (x *CoinContract) GetPurchaseUp() float32 {
	if x != nil {
		return x.PurchaseUp
	}
	return 0
}

func (x *CoinContract) GetPurchaseDown() float32 {
	if x != nil {
		return x.PurchaseDown
	}
	return 0
}

func (x *CoinContract) GetLossRatioUp() float32 {
	if x != nil {
		return x.LossRatioUp
	}
	return 0
}

func (x *CoinContract) GetLossRatioDown() float32 {
	if x != nil {
		return x.LossRatioDown
	}
	return 0
}

func (x *CoinContract) GetFeeRatio() float32 {
	if x != nil {
		return x.FeeRatio
	}
	return 0
}

func (x *CoinContract) GetIsProfit() int64 {
	if x != nil {
		return x.IsProfit
	}
	return 0
}

func (x *CoinContract) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CoinContract) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *CoinContract) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type TradeContractOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // Primary key
	UserId          int64   `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Refereeid       int64   `protobuf:"varint,3,opt,name=refereeid,proto3" json:"refereeid,omitempty"`
	TeamLeaderId    int64   `protobuf:"varint,4,opt,name=team_leader_id,json=teamLeaderId,proto3" json:"team_leader_id,omitempty"`
	ContractId      int64   `protobuf:"varint,5,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	CoinId          int64   `protobuf:"varint,6,opt,name=coin_id,json=coinId,proto3" json:"coin_id,omitempty"`
	OrderNo         string  `protobuf:"bytes,7,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`
	Title           string  `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	Num             float32 `protobuf:"fixed32,9,opt,name=num,proto3" json:"num,omitempty"`
	BuyPrice        float32 `protobuf:"fixed32,10,opt,name=buy_price,json=buyPrice,proto3" json:"buy_price,omitempty"`
	InvestedCoinNum float64 `protobuf:"fixed64,11,opt,name=invested_coin_num,json=investedCoinNum,proto3" json:"invested_coin_num,omitempty"`
	Fee             float64 `protobuf:"fixed64,12,opt,name=fee,proto3" json:"fee,omitempty"`
	FeeRatio        float32 `protobuf:"fixed32,13,opt,name=fee_ratio,json=feeRatio,proto3" json:"fee_ratio,omitempty"`
	SellPrice       float32 `protobuf:"fixed32,14,opt,name=sell_price,json=sellPrice,proto3" json:"sell_price,omitempty"`
	Income          float32 `protobuf:"fixed32,15,opt,name=income,proto3" json:"income,omitempty"`
	IncomeRatio     float32 `protobuf:"fixed32,16,opt,name=income_ratio,json=incomeRatio,proto3" json:"income_ratio,omitempty"`
	Status          int64   `protobuf:"varint,17,opt,name=status,proto3" json:"status,omitempty"`
	// @gotags: gorm:"-"
	StatusText    string `protobuf:"bytes,21,opt,name=status_text,json=statusText,proto3" json:"status_text,omitempty"`
	PaymentStatus int64  `protobuf:"varint,18,opt,name=payment_status,json=paymentStatus,proto3" json:"payment_status,omitempty"`
	BuyTime       int64  `protobuf:"varint,19,opt,name=buy_time,json=buyTime,proto3" json:"buy_time,omitempty"`
	SellTime      int64  `protobuf:"varint,20,opt,name=sell_time,json=sellTime,proto3" json:"sell_time,omitempty"`
}

func (x *TradeContractOrder) Reset() {
	*x = TradeContractOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeContractOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeContractOrder) ProtoMessage() {}

func (x *TradeContractOrder) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeContractOrder.ProtoReflect.Descriptor instead.
func (*TradeContractOrder) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{30}
}

func (x *TradeContractOrder) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TradeContractOrder) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TradeContractOrder) GetRefereeid() int64 {
	if x != nil {
		return x.Refereeid
	}
	return 0
}

func (x *TradeContractOrder) GetTeamLeaderId() int64 {
	if x != nil {
		return x.TeamLeaderId
	}
	return 0
}

func (x *TradeContractOrder) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *TradeContractOrder) GetCoinId() int64 {
	if x != nil {
		return x.CoinId
	}
	return 0
}

func (x *TradeContractOrder) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *TradeContractOrder) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TradeContractOrder) GetNum() float32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *TradeContractOrder) GetBuyPrice() float32 {
	if x != nil {
		return x.BuyPrice
	}
	return 0
}

func (x *TradeContractOrder) GetInvestedCoinNum() float64 {
	if x != nil {
		return x.InvestedCoinNum
	}
	return 0
}

func (x *TradeContractOrder) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *TradeContractOrder) GetFeeRatio() float32 {
	if x != nil {
		return x.FeeRatio
	}
	return 0
}

func (x *TradeContractOrder) GetSellPrice() float32 {
	if x != nil {
		return x.SellPrice
	}
	return 0
}

func (x *TradeContractOrder) GetIncome() float32 {
	if x != nil {
		return x.Income
	}
	return 0
}

func (x *TradeContractOrder) GetIncomeRatio() float32 {
	if x != nil {
		return x.IncomeRatio
	}
	return 0
}

func (x *TradeContractOrder) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TradeContractOrder) GetStatusText() string {
	if x != nil {
		return x.StatusText
	}
	return ""
}

func (x *TradeContractOrder) GetPaymentStatus() int64 {
	if x != nil {
		return x.PaymentStatus
	}
	return 0
}

func (x *TradeContractOrder) GetBuyTime() int64 {
	if x != nil {
		return x.BuyTime
	}
	return 0
}

func (x *TradeContractOrder) GetSellTime() int64 {
	if x != nil {
		return x.SellTime
	}
	return 0
}

type SmsTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // Primary key
	Title      string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Code       string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Template   string `protobuf:"bytes,4,opt,name=template,proto3" json:"template,omitempty"`
	Content    string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	Variables  string `protobuf:"bytes,6,opt,name=variables,proto3" json:"variables,omitempty"`
	Status     int64  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	Updatetime int64  `protobuf:"varint,8,opt,name=updatetime,proto3" json:"updatetime,omitempty"`
	Createtime int64  `protobuf:"varint,9,opt,name=createtime,proto3" json:"createtime,omitempty"`
}

func (x *SmsTemplate) Reset() {
	*x = SmsTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmsTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsTemplate) ProtoMessage() {}

func (x *SmsTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsTemplate.ProtoReflect.Descriptor instead.
func (*SmsTemplate) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{31}
}

func (x *SmsTemplate) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SmsTemplate) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SmsTemplate) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SmsTemplate) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *SmsTemplate) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SmsTemplate) GetVariables() string {
	if x != nil {
		return x.Variables
	}
	return ""
}

func (x *SmsTemplate) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SmsTemplate) GetUpdatetime() int64 {
	if x != nil {
		return x.Updatetime
	}
	return 0
}

func (x *SmsTemplate) GetCreatetime() int64 {
	if x != nil {
		return x.Createtime
	}
	return 0
}

type SmsVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // Primary key
	Title       string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ValueSource string `protobuf:"bytes,4,opt,name=value_source,json=valueSource,proto3" json:"value_source,omitempty"` // enum ('literal','func','sql') default 'literal' not null
	Value       string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Sql         string `protobuf:"bytes,6,opt,name=sql,proto3" json:"sql,omitempty"`
	Namespace   string `protobuf:"bytes,7,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Class       string `protobuf:"bytes,8,opt,name=class,proto3" json:"class,omitempty"`
	Func        string `protobuf:"bytes,9,opt,name=func,proto3" json:"func,omitempty"`
	Param       string `protobuf:"bytes,10,opt,name=param,proto3" json:"param,omitempty"`
	Status      int64  `protobuf:"varint,11,opt,name=status,proto3" json:"status,omitempty"`
	Updatetime  int64  `protobuf:"varint,12,opt,name=updatetime,proto3" json:"updatetime,omitempty"`
	Createtime  int64  `protobuf:"varint,13,opt,name=createtime,proto3" json:"createtime,omitempty"`
}

func (x *SmsVariable) Reset() {
	*x = SmsVariable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mproto_model_model_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmsVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsVariable) ProtoMessage() {}

func (x *SmsVariable) ProtoReflect() protoreflect.Message {
	mi := &file_mproto_model_model_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsVariable.ProtoReflect.Descriptor instead.
func (*SmsVariable) Descriptor() ([]byte, []int) {
	return file_mproto_model_model_proto_rawDescGZIP(), []int{32}
}

func (x *SmsVariable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SmsVariable) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SmsVariable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SmsVariable) GetValueSource() string {
	if x != nil {
		return x.ValueSource
	}
	return ""
}

func (x *SmsVariable) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SmsVariable) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *SmsVariable) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *SmsVariable) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *SmsVariable) GetFunc() string {
	if x != nil {
		return x.Func
	}
	return ""
}

func (x *SmsVariable) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *SmsVariable) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SmsVariable) GetUpdatetime() int64 {
	if x != nil {
		return x.Updatetime
	}
	return 0
}

func (x *SmsVariable) GetCreatetime() int64 {
	if x != nil {
		return x.Createtime
	}
	return 0
}

var File_mproto_model_model_proto protoreflect.FileDescriptor

var file_mproto_model_model_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x22, 0xa1, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0xfe, 0x04, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x6f,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f,
	0x67, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x6c, 0x69,
	0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x75, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x68, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x69, 0x67, 0x68, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x65, 0x69, 0x67, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x12, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x73, 0x54, 0x6f, 0x70, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x69, 0x73, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xc2, 0x0c, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x69, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x69, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x5f, 0x69, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x69, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6a, 0x6f, 0x69, 0x6e, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x74, 0x74, 0x6f, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x74, 0x74, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x75, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65,
	0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x65, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x64, 0x63, 0x61, 0x72, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x69, 0x64, 0x63, 0x61, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x73,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f,
	0x63, 0x61, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x69, 0x73, 0x43, 0x61, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x73, 0x54, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x77, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69,
	0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x73, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x4e, 0x75, 0x6d, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x73, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x75, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x46, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x30, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x09,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x73, 0x18, 0x31, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x09, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xf5, 0x03, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x4e, 0x75, 0x6d,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x28,
	0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x22,
	0x0a, 0x0d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x31, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x31, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x32, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x32, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x33, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x33, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x34, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x34, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x22,
	0x0a, 0x0d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x35, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x35, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0xca, 0x01, 0x0a, 0x08,
	0x54, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x73,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x0d, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x6e, 0x75, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d,
	0x4e, 0x75, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x65, 0x4e, 0x75, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9d, 0x02, 0x0a, 0x0d, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x87, 0x02, 0x0a, 0x0e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x72, 0x6f, 0x75, 0x73, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x65, 0x69, 0x67, 0x68, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x4f,
	0x70, 0x65, 0x6e, 0x22, 0xdd, 0x01, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xa7, 0x04, 0x0a, 0x0e, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x44, 0x61, 0x79, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x73, 0x6f, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f,
	0x62, 0x75, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x69, 0x6e, 0x42, 0x75, 0x79, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f,
	0x62, 0x75, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x78, 0x42, 0x75, 0x79, 0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x69, 0x67, 0x68, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x65, 0x69, 0x67, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf9, 0x06, 0x0a,
	0x0f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65,
	0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x69, 0x6e,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x69, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x63, 0x6f, 0x69, 0x6e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x75, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x62, 0x75, 0x79, 0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x69, 0x64,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x62, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72,
	0x65, 0x62, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x44, 0x61, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xea, 0x03, 0x0a, 0x06, 0x4d, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x73, 0x61, 0x6c, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x75, 0x79,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x69, 0x67, 0x68, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x65, 0x69, 0x67, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xfa, 0x01, 0x0a, 0x09, 0x4b, 0x6c, 0x69, 0x6e, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x0a, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x69, 0x67, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f,
	0x77, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0xbe,
	0x02, 0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x73, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x25,
	0x0a, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xcc, 0x06, 0x0a, 0x0b, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x65, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e,
	0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12,
	0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c,
	0x5f, 0x70, 0x61, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x72, 0x65, 0x61, 0x6c,
	0x50, 0x61, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x67, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x67, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62, 0x6f, 0x6e, 0x75, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x4d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x22, 0xf9,
	0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc6, 0x02, 0x0a, 0x0e, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x74,
	0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x22, 0xe0, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc8, 0x02, 0x0a, 0x09, 0x4d, 0x61, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x22, 0xee, 0x02, 0x0a, 0x08, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c,
	0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x69, 0x67, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x77, 0x65, 0x69, 0x67, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xd3, 0x02, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8a, 0x06, 0x0a, 0x11, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x65, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74,
	0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x4e, 0x75, 0x6d,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x65,
	0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x66,
	0x65, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x63,
	0x6f, 0x69, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x66, 0x65, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0d, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x22, 0x9b, 0x04, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x65,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x66,
	0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0d,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x75, 0x6d,
	0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x69,
	0x6e, 0x46, 0x65, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xb9, 0x04, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x6e,
	0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x25,
	0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x65, 0x69, 0x67, 0x68, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x80, 0x04, 0x0a, 0x0c, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x79,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x62, 0x75, 0x79, 0x69, 0x6e, 0x67, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x62, 0x75, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x75, 0x79, 0x69, 0x6e, 0x67, 0x43,
	0x79, 0x63, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x55, 0x70,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x55, 0x70, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x44, 0x6f,
	0x77, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x5f, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6c, 0x6f, 0x73, 0x73, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x55, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x6c, 0x6f, 0x73, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x69, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xe8, 0x04, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x69, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03,
	0x6e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x62, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x69,
	0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03,
	0x66, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x73, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x65, 0x78, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf3, 0x01,
	0x0a, 0x0b, 0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0xc8, 0x02, 0x0a, 0x0b, 0x53, 0x6d, 0x73, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x75, 0x6e, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x63,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x1f,
	0x5a, 0x1d, 0x6d, 0x75, 0x73, 0x6b, 0x65, 0x78, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x6d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x3b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mproto_model_model_proto_rawDescOnce sync.Once
	file_mproto_model_model_proto_rawDescData = file_mproto_model_model_proto_rawDesc
)

func file_mproto_model_model_proto_rawDescGZIP() []byte {
	file_mproto_model_model_proto_rawDescOnce.Do(func() {
		file_mproto_model_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_mproto_model_model_proto_rawDescData)
	})
	return file_mproto_model_model_proto_rawDescData
}

var file_mproto_model_model_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_mproto_model_model_proto_goTypes = []any{
	(*Config)(nil),                 // 0: model.Config
	(*Coin)(nil),                   // 1: model.Coin
	(*MarketNews)(nil),             // 2: model.MarketNews
	(*MarketNotice)(nil),           // 3: model.MarketNotice
	(*User)(nil),                   // 4: model.User
	(*Token)(nil),                  // 5: model.Token
	(*UserLevel)(nil),              // 6: model.UserLevel
	(*TeamUser)(nil),               // 7: model.TeamUser
	(*UserTeamLevel)(nil),          // 8: model.UserTeamLevel
	(*FinancialCard)(nil),          // 9: model.FinancialCard
	(*MarketCarousel)(nil),         // 10: model.MarketCarousel
	(*FinancialBank)(nil),          // 11: model.FinancialBank
	(*FinancialAddress)(nil),       // 12: model.FinancialAddress
	(*CoinManagement)(nil),         // 13: model.CoinManagement
	(*ManagementOrder)(nil),        // 14: model.ManagementOrder
	(*Miners)(nil),                 // 15: model.Miners
	(*KlineData)(nil),              // 16: model.KlineData
	(*TickerData)(nil),             // 17: model.TickerData
	(*MinersExchange)(nil),         // 18: model.MinersExchange
	(*MinersOrder)(nil),            // 19: model.MinersOrder
	(*UserAssets)(nil),             // 20: model.UserAssets
	(*UserCoinChange)(nil),         // 21: model.UserCoinChange
	(*CoinRecharge)(nil),           // 22: model.CoinRecharge
	(*ManChange)(nil),              // 23: model.ManChange
	(*Lecturer)(nil),               // 24: model.Lecturer
	(*UserCommissionChange)(nil),   // 25: model.UserCommissionChange
	(*FinancialWithdraw)(nil),      // 26: model.FinancialWithdraw
	(*FinancialRecharge)(nil),      // 27: model.FinancialRecharge
	(*FinancialPaymentMethod)(nil), // 28: model.FinancialPaymentMethod
	(*CoinContract)(nil),           // 29: model.CoinContract
	(*TradeContractOrder)(nil),     // 30: model.TradeContractOrder
	(*SmsTemplate)(nil),            // 31: model.SmsTemplate
	(*SmsVariable)(nil),            // 32: model.SmsVariable
}
var file_mproto_model_model_proto_depIdxs = []int32{
	12, // 0: model.User.withdraw_addresses:type_name -> model.FinancialAddress
	26, // 1: model.User.Withdraws:type_name -> model.FinancialWithdraw
	13, // 2: model.ManagementOrder.coin_management:type_name -> model.CoinManagement
	1,  // 3: model.ManagementOrder.settlement_coin:type_name -> model.Coin
	1,  // 4: model.ManagementOrder.income_coin:type_name -> model.Coin
	15, // 5: model.MinersOrder.miners:type_name -> model.Miners
	9,  // 6: model.FinancialWithdraw.FinancialCard:type_name -> model.FinancialCard
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_mproto_model_model_proto_init() }
func file_mproto_model_model_proto_init() {
	if File_mproto_model_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mproto_model_model_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Coin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*MarketNews); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*MarketNotice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*UserLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*TeamUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*UserTeamLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*FinancialCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*MarketCarousel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*FinancialBank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*FinancialAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CoinManagement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ManagementOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*Miners); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*KlineData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*TickerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*MinersExchange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*MinersOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*UserAssets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*UserCoinChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*CoinRecharge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*ManChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*Lecturer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*UserCommissionChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*FinancialWithdraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*FinancialRecharge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*FinancialPaymentMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*CoinContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*TradeContractOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*SmsTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mproto_model_model_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*SmsVariable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mproto_model_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mproto_model_model_proto_goTypes,
		DependencyIndexes: file_mproto_model_model_proto_depIdxs,
		MessageInfos:      file_mproto_model_model_proto_msgTypes,
	}.Build()
	File_mproto_model_model_proto = out.File
	file_mproto_model_model_proto_rawDesc = nil
	file_mproto_model_model_proto_goTypes = nil
	file_mproto_model_model_proto_depIdxs = nil
}
